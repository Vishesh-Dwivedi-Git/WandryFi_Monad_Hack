{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        {
          "name": "_verifierAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_treasuryAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "_initialFeePercent",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "BASE_REWARD",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "BETA",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "MIN_STAKE_DURATION",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "approve",
      "inputs": [
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "tokenId", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "balanceOf",
      "inputs": [
        { "name": "owner", "type": "address", "internalType": "address" }
      ],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkIn",
      "inputs": [
        { "name": "_signature", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "commitments",
      "inputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "outputs": [
        { "name": "user", "type": "address", "internalType": "address" },
        {
          "name": "amountInPool",
          "type": "uint256",
          "internalType": "uint256"
        },
        { "name": "travelDate", "type": "uint256", "internalType": "uint256" },
        {
          "name": "destinationId",
          "type": "uint256",
          "internalType": "uint256"
        },
        { "name": "isProcessed", "type": "bool", "internalType": "bool" }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "destinationMetadata",
      "inputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "", "type": "string", "internalType": "string" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "destinationNames",
      "inputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "", "type": "string", "internalType": "string" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getApproved",
      "inputs": [
        { "name": "tokenId", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getJourneyNFTDetails",
      "inputs": [
        { "name": "tokenId", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [
        {
          "name": "",
          "type": "tuple",
          "internalType": "struct WandryFi.JourneyNFT",
          "components": [
            {
              "name": "destinationId",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "completionDate",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "stakedAmount",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "rewardEarned",
              "type": "uint256",
              "internalType": "uint256"
            },
            {
              "name": "destinationName",
              "type": "string",
              "internalType": "string"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getLeaderboard",
      "inputs": [],
      "outputs": [
        { "name": "", "type": "address[]", "internalType": "address[]" },
        { "name": "", "type": "uint256[]", "internalType": "uint256[]" }
      ],
      "stateMutability": "pure"
    },
    {
      "type": "function",
      "name": "getUserJourneyCount",
      "inputs": [
        { "name": "user", "type": "address", "internalType": "address" }
      ],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "getUserJourneyNFTs",
      "inputs": [
        { "name": "user", "type": "address", "internalType": "address" }
      ],
      "outputs": [
        { "name": "", "type": "uint256[]", "internalType": "uint256[]" }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "isApprovedForAll",
      "inputs": [
        { "name": "owner", "type": "address", "internalType": "address" },
        { "name": "operator", "type": "address", "internalType": "address" }
      ],
      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "journeyNFTs",
      "inputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "outputs": [
        {
          "name": "destinationId",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "completionDate",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "stakedAmount",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "rewardEarned",
          "type": "uint256",
          "internalType": "uint256"
        },
        {
          "name": "destinationName",
          "type": "string",
          "internalType": "string"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "locationPools",
      "inputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "name",
      "inputs": [],
      "outputs": [{ "name": "", "type": "string", "internalType": "string" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "ownerOf",
      "inputs": [
        { "name": "tokenId", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "pause",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "paused",
      "inputs": [],
      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "placeValues",
      "inputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "platformFeePercent",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "processFailure",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "renounceOwnership",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "safeTransferFrom",
      "inputs": [
        { "name": "from", "type": "address", "internalType": "address" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "tokenId", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "safeTransferFrom",
      "inputs": [
        { "name": "from", "type": "address", "internalType": "address" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "tokenId", "type": "uint256", "internalType": "uint256" },
        { "name": "data", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "seedPool",
      "inputs": [
        {
          "name": "_destinationId",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "setApprovalForAll",
      "inputs": [
        { "name": "operator", "type": "address", "internalType": "address" },
        { "name": "approved", "type": "bool", "internalType": "bool" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setDestinationMetadata",
      "inputs": [
        {
          "name": "_destinationId",
          "type": "uint256",
          "internalType": "uint256"
        },
        { "name": "_metadataURI", "type": "string", "internalType": "string" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setDestinationName",
      "inputs": [
        {
          "name": "_destinationId",
          "type": "uint256",
          "internalType": "uint256"
        },
        { "name": "_name", "type": "string", "internalType": "string" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setPlaceValue",
      "inputs": [
        {
          "name": "_destinationId",
          "type": "uint256",
          "internalType": "uint256"
        },
        { "name": "_value", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setPlatformFeePercent",
      "inputs": [
        {
          "name": "_newFeePercent",
          "type": "uint256",
          "internalType": "uint256"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setTreasuryAddress",
      "inputs": [
        { "name": "_newAddress", "type": "address", "internalType": "address" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setVerifierAddress",
      "inputs": [
        { "name": "_newAddress", "type": "address", "internalType": "address" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "stake",
      "inputs": [
        {
          "name": "_destinationId",
          "type": "uint256",
          "internalType": "uint256"
        },
        { "name": "_travelDate", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "supportsInterface",
      "inputs": [
        { "name": "interfaceId", "type": "bytes4", "internalType": "bytes4" }
      ],
      "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "symbol",
      "inputs": [],
      "outputs": [{ "name": "", "type": "string", "internalType": "string" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "tokenURI",
      "inputs": [
        { "name": "tokenId", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [{ "name": "", "type": "string", "internalType": "string" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "transferFrom",
      "inputs": [
        { "name": "from", "type": "address", "internalType": "address" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "tokenId", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        { "name": "newOwner", "type": "address", "internalType": "address" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "treasuryAddress",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "unpause",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "userJourneyNFTs",
      "inputs": [
        { "name": "", "type": "address", "internalType": "address" },
        { "name": "", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "userProfits",
      "inputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "verifierAddress",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "withdrawFees",
      "inputs": [],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "Approval",
      "inputs": [
        {
          "name": "owner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "approved",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ApprovalForAll",
      "inputs": [
        {
          "name": "owner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "operator",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "approved",
          "type": "bool",
          "indexed": false,
          "internalType": "bool"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "BatchMetadataUpdate",
      "inputs": [
        {
          "name": "_fromTokenId",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "_toTokenId",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "CheckedIn",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "destinationId",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "payout",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "FailureProcessed",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "destinationId",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "JourneyNFTMinted",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "destinationId",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "MetadataUpdate",
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "OwnershipTransferred",
      "inputs": [
        {
          "name": "previousOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Paused",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "PoolSeeded",
      "inputs": [
        {
          "name": "destinationId",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        },
        {
          "name": "amount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ProfitRecorded",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "profit",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Staked",
      "inputs": [
        {
          "name": "user",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "destinationId",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "totalAmount",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        },
        {
          "name": "travelDate",
          "type": "uint256",
          "indexed": false,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Transfer",
      "inputs": [
        {
          "name": "from",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "to",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256",
          "indexed": true,
          "internalType": "uint256"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Unpaused",
      "inputs": [
        {
          "name": "account",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    }
  ],
  "bytecode": {
    "object": "",
    "sourceMap": "604:11227:42:-:0;;;3002:503;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1390:113:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1464:5;1456;:13;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;:::i;:::-;;1390:113;;936:32:23;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;1716:1:28;1821:7;:22;;;;1006:5:27;996:7;;:15;;;;;;;;;;;;;;;;;;3189:1:42::1;3161:30;;:16;:30;;::::0;3153:66:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;3265:1;3237:30;;:16;:30;;::::0;3229:66:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;3335:1;3313:18;:23;;3305:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;3389:16;3371:15;;:34;;;;;;;;;;;;;;;;;;3433:16;3415:15;;:34;;;;;;;;;;;;;;;;;;3480:18;3459;:39;;;;3002:503:::0;;;604:11227;;640:96:35;693:7;719:10;712:17;;640:96;:::o;2426:187:23:-;2499:16;2518:6;;;;;;;;;;;2499:25;;2543:8;2534:6;;:17;;;;;;;;;;;;;;;;;;2597:8;2566:40;;2587:8;2566:40;;;;;;;;;;;;2489:124;2426:187;:::o;88:117:44:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:77::-;882:7;911:5;900:16;;845:77;;;:::o;928:122::-;1001:24;1019:5;1001:24;:::i;:::-;994:5;991:35;981:63;;1040:1;1037;1030:12;981:63;928:122;:::o;1056:143::-;1113:5;1144:6;1138:13;1129:22;;1160:33;1187:5;1160:33;:::i;:::-;1056:143;;;;:::o;1205:663::-;1293:6;1301;1309;1358:2;1346:9;1337:7;1333:23;1329:32;1326:119;;;1364:79;;:::i;:::-;1326:119;1484:1;1509:64;1565:7;1556:6;1545:9;1541:22;1509:64;:::i;:::-;1499:74;;1455:128;1622:2;1648:64;1704:7;1695:6;1684:9;1680:22;1648:64;:::i;:::-;1638:74;;1593:129;1761:2;1787:64;1843:7;1834:6;1823:9;1819:22;1787:64;:::i;:::-;1777:74;;1732:129;1205:663;;;;;:::o;1874:99::-;1926:6;1960:5;1954:12;1944:22;;1874:99;;;:::o;1979:180::-;2027:77;2024:1;2017:88;2124:4;2121:1;2114:15;2148:4;2145:1;2138:15;2165:180;2213:77;2210:1;2203:88;2310:4;2307:1;2300:15;2334:4;2331:1;2324:15;2351:320;2395:6;2432:1;2426:4;2422:12;2412:22;;2479:1;2473:4;2469:12;2500:18;2490:81;;2556:4;2548:6;2544:17;2534:27;;2490:81;2618:2;2610:6;2607:14;2587:18;2584:38;2581:84;;2637:18;;:::i;:::-;2581:84;2402:269;2351:320;;;:::o;2677:141::-;2726:4;2749:3;2741:11;;2772:3;2769:1;2762:14;2806:4;2803:1;2793:18;2785:26;;2677:141;;;:::o;2824:93::-;2861:6;2908:2;2903;2896:5;2892:14;2888:23;2878:33;;2824:93;;;:::o;2923:107::-;2967:8;3017:5;3011:4;3007:16;2986:37;;2923:107;;;;:::o;3036:393::-;3105:6;3155:1;3143:10;3139:18;3178:97;3208:66;3197:9;3178:97;:::i;:::-;3296:39;3326:8;3315:9;3296:39;:::i;:::-;3284:51;;3368:4;3364:9;3357:5;3353:21;3344:30;;3417:4;3407:8;3403:19;3396:5;3393:30;3383:40;;3112:317;;3036:393;;;;;:::o;3435:60::-;3463:3;3484:5;3477:12;;3435:60;;;:::o;3501:142::-;3551:9;3584:53;3602:34;3611:24;3629:5;3611:24;:::i;:::-;3602:34;:::i;:::-;3584:53;:::i;:::-;3571:66;;3501:142;;;:::o;3649:75::-;3692:3;3713:5;3706:12;;3649:75;;;:::o;3730:269::-;3840:39;3871:7;3840:39;:::i;:::-;3901:91;3950:41;3974:16;3950:41;:::i;:::-;3942:6;3935:4;3929:11;3901:91;:::i;:::-;3895:4;3888:105;3806:193;3730:269;;;:::o;4005:73::-;4050:3;4071:1;4064:8;;4005:73;:::o;4084:189::-;4161:32;;:::i;:::-;4202:65;4260:6;4252;4246:4;4202:65;:::i;:::-;4137:136;4084:189;;:::o;4279:186::-;4339:120;4356:3;4349:5;4346:14;4339:120;;;4410:39;4447:1;4440:5;4410:39;:::i;:::-;4383:1;4376:5;4372:13;4363:22;;4339:120;;;4279:186;;:::o;4471:543::-;4572:2;4567:3;4564:11;4561:446;;;4606:38;4638:5;4606:38;:::i;:::-;4690:29;4708:10;4690:29;:::i;:::-;4680:8;4676:44;4873:2;4861:10;4858:18;4855:49;;;4894:8;4879:23;;4855:49;4917:80;4973:22;4991:3;4973:22;:::i;:::-;4963:8;4959:37;4946:11;4917:80;:::i;:::-;4576:431;;4561:446;4471:543;;;:::o;5020:117::-;5074:8;5124:5;5118:4;5114:16;5093:37;;5020:117;;;;:::o;5143:169::-;5187:6;5220:51;5268:1;5264:6;5256:5;5253:1;5249:13;5220:51;:::i;:::-;5216:56;5301:4;5295;5291:15;5281:25;;5194:118;5143:169;;;;:::o;5317:295::-;5393:4;5539:29;5564:3;5558:4;5539:29;:::i;:::-;5531:37;;5601:3;5598:1;5594:11;5588:4;5585:21;5577:29;;5317:295;;;;:::o;5617:1395::-;5734:37;5767:3;5734:37;:::i;:::-;5836:18;5828:6;5825:30;5822:56;;;5858:18;;:::i;:::-;5822:56;5902:38;5934:4;5928:11;5902:38;:::i;:::-;5987:67;6047:6;6039;6033:4;5987:67;:::i;:::-;6081:1;6105:4;6092:17;;6137:2;6129:6;6126:14;6154:1;6149:618;;;;6811:1;6828:6;6825:77;;;6877:9;6872:3;6868:19;6862:26;6853:35;;6825:77;6928:67;6988:6;6981:5;6928:67;:::i;:::-;6922:4;6915:81;6784:222;6119:887;;6149:618;6201:4;6197:9;6189:6;6185:22;6235:37;6267:4;6235:37;:::i;:::-;6294:1;6308:208;6322:7;6319:1;6316:14;6308:208;;;6401:9;6396:3;6392:19;6386:26;6378:6;6371:42;6452:1;6444:6;6440:14;6430:24;;6499:2;6488:9;6484:18;6471:31;;6345:4;6342:1;6338:12;6333:17;;6308:208;;;6544:6;6535:7;6532:19;6529:179;;;6602:9;6597:3;6593:19;6587:26;6645:48;6687:4;6679:6;6675:17;6664:9;6645:48;:::i;:::-;6637:6;6630:64;6552:156;6529:179;6754:1;6750;6742:6;6738:14;6734:22;6728:4;6721:36;6156:611;;;6119:887;;5709:1303;;;5617:1395;;:::o;7018:169::-;7102:11;7136:6;7131:3;7124:19;7176:4;7171:3;7167:14;7152:29;;7018:169;;;;:::o;7193:173::-;7333:25;7329:1;7321:6;7317:14;7310:49;7193:173;:::o;7372:366::-;7514:3;7535:67;7599:2;7594:3;7535:67;:::i;:::-;7528:74;;7611:93;7700:3;7611:93;:::i;:::-;7729:2;7724:3;7720:12;7713:19;;7372:366;;;:::o;7744:419::-;7910:4;7948:2;7937:9;7933:18;7925:26;;7997:9;7991:4;7987:20;7983:1;7972:9;7968:17;7961:47;8025:131;8151:4;8025:131;:::i;:::-;8017:139;;7744:419;;;:::o;8169:173::-;8309:25;8305:1;8297:6;8293:14;8286:49;8169:173;:::o;8348:366::-;8490:3;8511:67;8575:2;8570:3;8511:67;:::i;:::-;8504:74;;8587:93;8676:3;8587:93;:::i;:::-;8705:2;8700:3;8696:12;8689:19;;8348:366;;;:::o;8720:419::-;8886:4;8924:2;8913:9;8909:18;8901:26;;8973:9;8967:4;8963:20;8959:1;8948:9;8944:17;8937:47;9001:131;9127:4;9001:131;:::i;:::-;8993:139;;8720:419;;;:::o;9145:170::-;9285:22;9281:1;9273:6;9269:14;9262:46;9145:170;:::o;9321:366::-;9463:3;9484:67;9548:2;9543:3;9484:67;:::i;:::-;9477:74;;9560:93;9649:3;9560:93;:::i;:::-;9678:2;9673:3;9669:12;9662:19;;9321:366;;;:::o;9693:419::-;9859:4;9897:2;9886:9;9882:18;9874:26;;9946:9;9940:4;9936:20;9932:1;9921:9;9917:17;9910:47;9974:131;10100:4;9974:131;:::i;:::-;9966:139;;9693:419;;;:::o;604:11227:42:-;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "",
    "sourceMap": "604:11227:42:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10599:169;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8541:229;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2471:98:29;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1183:33:42;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167:29;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1567:52:42;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1298:46;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8929:168;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9449:182;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;943:30;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1131:46;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4612:296:29;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;7922:126:42;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4576:1817;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1735:53;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6399:451;;;;;;;;;;;;;:::i;:::-;;1244:48;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9168:63;;;;;;;;;;;;;:::i;:::-;;4974:149:29;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9237:206:42;;;;;;;;;;;;;:::i;:::-;;1654:50;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8248:125;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1615:84:27;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2190:219:29;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9637:182:42;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;11602:227;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1929:204:29;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1824:101:23;;;;;;;;;;;;;:::i;:::-;;3672:898:42;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;9103:59;;;;;;;;;;;;;:::i;:::-;;1015:33;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1201:85:23;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102:29;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8054:188:42;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;8776:147;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4169:153:29;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5189:276;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1405:46:42;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10017:133;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;979:30;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10440:153;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9825:186;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1073:52;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1486:49;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;1350;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;4388:162:29;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2074:198:23;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;10599:169:42;10702:4;10725:36;10749:11;10725:23;:36::i;:::-;10718:43;;10599:169;;;:::o;8541:229::-;1094:13:23;:11;:13::i;:::-;8638:1:42::1;8626:9;:13;8618:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;8702:9;8669:13;:29;8683:14;8669:29;;;;;;;;;;;;:42;;;;;;;:::i;:::-;;;;;;;;8737:14;8726:37;8753:9;8726:37;;;;;;:::i;:::-;;;;;;;;8541:229:::0;:::o;2471:98:29:-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;1183:33:42:-;1214:2;1183:33;:::o;3935:167:29:-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;1567:52:42:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1298:46::-;;;;;;;;;;;;;;;;;:::o;8929:168::-;1094:13:23;:11;:13::i;:::-;9078:12:42::1;9040:19;:35;9060:14;9040:35;;;;;;;;;;;:50;;;;;;:::i;:::-;;8929:168:::0;;:::o;9449:182::-;1094:13:23;:11;:13::i;:::-;9556:1:42::1;9533:25;;:11;:25;;::::0;9525:60:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;9613:11;9595:15;;:29;;;;;;;;;;;;;;;;;;9449:182:::0;:::o;943:30::-;;;;;;;;;;;;;:::o;1131:46::-;1169:8;1131:46;:::o;4612:296:29:-;4771:41;4790:12;:10;:12::i;:::-;4804:7;4771:18;:41::i;:::-;4763:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4873:28;4883:4;4889:2;4893:7;4873:9;:28::i;:::-;4612:296;;;:::o;7922:126:42:-;7985:16;8020:15;:21;8036:4;8020:21;;;;;;;;;;;;;;;8013:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7922:126;;;:::o;4576:1817::-;2261:21:28;:19;:21::i;:::-;1239:19:27::1;:17;:19::i;:::-;4662:29:42::2;4694:11;:23;4706:10;4694:23;;;;;;;;;;;;;;;4662:55;;4763:1;4736:29;;:10;:15;;;;;;;;;;;;:29;;::::0;4728:62:::2;;;;;;;;;;;;:::i;:::-;;;;;;;;;4809:10;:22;;;;;;;;;;;;4808:23;4800:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;4901:10;:21;;;4882:15;:40;;4874:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;4965:19;5014:10;5026;:24;;;4997:54;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4987:65;;;;;;4965:87;;5062:14;5079:38;5093:11;5106:10;5079:13;:38::i;:::-;5062:55;;5145:15;;;;;;;;;;;5135:25;;:6;:25;;;5127:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;5212:23;5309:3;5267:11;:37;5279:10;:24;;;5267:37;;;;;;;;;;;;1214:2;5260:44;;;;:::i;:::-;5253:3;:52;;;;:::i;:::-;1169:8;5238:68;;;;:::i;:::-;:74;;;;:::i;:::-;5212:100;;5322:15;5382:2;5340:13;:39;5354:10;:24;;;5340:39;;;;;;;;;;;;:44;;;;:::i;:::-;5322:62;;5394:16;5432:7;5414:15;:25;5413:55;;5461:7;5413:55;;;5443:15;5413:55;5394:74;;5479:19;5527:8;5501:10;:23;;;:34;;;;:::i;:::-;5479:56;;5609:1;5588:18;;:22;5584:368;;;5626:21;5691:18;;5685:3;:24;;;;:::i;:::-;5677:3;5651:10;:23;;;:29;;;;:::i;:::-;5650:60;;;;:::i;:::-;5626:84;;5742:13;5728:11;:27;5724:218;;;5775:14;5806:13;5792:11;:27;;;;:::i;:::-;5775:44;;5864:6;5837:11;:23;5849:10;5837:23;;;;;;;;;;;;;;;;:33;;;;;;;:::i;:::-;;;;;;;;5908:10;5893:34;;;5920:6;5893:34;;;;;;:::i;:::-;;;;;;;;5757:185;5724:218;5612:340;5584:368;6005:8;5962:13;:39;5976:10;:24;;;5962:39;;;;;;;;;;;;:51;;;;;;;:::i;:::-;;;;;;;;6048:4;6023:10;:22;;;:29;;;;;;;;;;;;;;;;;;6117:88;6133:10;6145;:24;;;6171:10;:23;;;6196:8;6117:15;:88::i;:::-;6217:9;6231:10;:15;;6254:11;6231:39;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6216:54;;;6288:4;6280:30;;;;;;;;;;;;:::i;:::-;;;;;;;;;6336:10;6326:60;;;6348:10;:24;;;6374:11;6326:60;;;;;;;:::i;:::-;;;;;;;;4652:1741;;;;;;;;2303:20:28::0;:18;:20::i;:::-;4576:1817:42;:::o;1735:53::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6399:451::-;6442:29;6474:11;:23;6486:10;6474:23;;;;;;;;;;;;;;;6442:55;;6542:1;6515:29;;:10;:15;;;;;;;;;;;;:29;;;6507:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;6588:10;:22;;;;;;;;;;;;6587:23;6579:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;6679:10;:21;;;6661:15;:39;6653:82;;;;;;;;;;;;:::i;:::-;;;;;;;;;6770:4;6745:10;:22;;;:29;;;;;;;;;;;;;;;;;;6806:10;6789:54;;;6818:10;:24;;;6789:54;;;;;;:::i;:::-;;;;;;;;6432:418;6399:451::o;1244:48::-;;;;;;;;;;;;;;;;;:::o;9168:63::-;1094:13:23;:11;:13::i;:::-;9214:10:42::1;:8;:10::i;:::-;9168:63::o:0;4974:149:29:-;5077:39;5094:4;5100:2;5104:7;5077:39;;;;;;;;;;;;:16;:39::i;:::-;4974:149;;;:::o;9237:206:42:-;1094:13:23;:11;:13::i;:::-;9288:15:42::1;9306:21;9288:39;;9338:9;9352:15;;;;;;;;;;;:20;;9380:7;9352:40;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9337:55;;;9410:4;9402:34;;;;;;;;;;;;:::i;:::-;;;;;;;;;9278:165;;9237:206::o:0;1654:50::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;8248:125::-;8312:7;8338:15;:21;8354:4;8338:21;;;;;;;;;;;;;;;:28;;;;8331:35;;8248:125;;;:::o;1615:84:27:-;1662:4;1685:7;;;;;;;;;;;1678:14;;1615:84;:::o;2190:219:29:-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;9637:182:42:-;1094:13:23;:11;:13::i;:::-;9744:1:42::1;9721:25;;:11;:25;;::::0;9713:60:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;9801:11;9783:15;;:29;;;;;;;;;;;;;;;;;;9637:182:::0;:::o;11602:227::-;11649:16;11667;11695:22;11734:1;11720:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11695:41;;11746:24;11787:1;11773:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11746:43;;11807:5;11814:7;11799:23;;;;;;11602:227;;:::o;1929:204:29:-;2001:7;2045:1;2028:19;;:5;:19;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;1824:101:23:-;1094:13;:11;:13::i;:::-;1888:30:::1;1915:1;1888:18;:30::i;:::-;1824:101::o:0;3672:898:42:-;1239:19:27;:17;:19::i;:::-;3791:1:42::1;3779:9;:13;3771:43;;;;;;;;;;;;:::i;:::-;;;;;;;;;3993:4;3954:43;;:11;:23;3966:10;3954:23;;;;;;;;;;;;;;;:35;;;;;;;;;;;;:43;;;:89;;;;4041:1;4001:42;;:11;:23;4013:10;4001:23;;;;;;;;;;;;;;;:28;;;;;;;;;;;;:42;;;3954:89;3933:160;;;;;;;;;;;;:::i;:::-;;;;;;;;;4104:17;4159:3;4137:18;;4125:9;:30;;;;:::i;:::-;4124:38;;;;:::i;:::-;4104:58;;4172:18;4205:9;4193;:21;;;;:::i;:::-;4172:42;;4226:9;4240:15;;;;;;;;;;;:20;;4268:9;4240:42;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4225:57;;;4300:4;4292:36;;;;;;;;;;;;:::i;:::-;;;;;;;;;4372:10;4339:13;:29;4353:14;4339:29;;;;;;;;;;;;:43;;;;;;;:::i;:::-;;;;;;;;4419:70;;;;;;;;4430:10;4419:70;;;;;;4442:10;4419:70;;;;4454:11;4419:70;;;;4467:14;4419:70;;;;4483:5;4419:70;;;;::::0;4393:11:::1;:23;4405:10;4393:23;;;;;;;;;;;;;;;:96;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4512:10;4505:58;;;4524:14;4540:9;4551:11;4505:58;;;;;;;;:::i;:::-;;;;;;;;3761:809;;;3672:898:::0;;:::o;9103:59::-;1094:13:23;:11;:13::i;:::-;9147:8:42::1;:6;:8::i;:::-;9103:59::o:0;1015:33::-;;;;:::o;1201:85:23:-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;2633:102:29:-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;8054:188:42:-;8122:17;;:::i;:::-;8159:16;8167:7;8159;:16::i;:::-;8151:47;;;;;;;;;;;;:::i;:::-;;;;;;;;;8215:11;:20;8227:7;8215:20;;;;;;;;;;;8208:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8054:188;;;:::o;8776:147::-;1094:13:23;:11;:13::i;:::-;8911:5:42::1;8876:16;:32;8893:14;8876:32;;;;;;;;;;;:40;;;;;;:::i;:::-;;8776:147:::0;;:::o;4169:153:29:-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5189:276::-;5319:41;5338:12;:10;:12::i;:::-;5352:7;5319:18;:41::i;:::-;5311:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5420:38;5434:4;5440:2;5444:7;5453:4;5420:13;:38::i;:::-;5189:276;;;;:::o;1405:46:42:-;;;;;;;;;;;;;;;;;:::o;10017:133::-;1094:13:23;:11;:13::i;:::-;10137:6:42::1;10107:11;:27;10119:14;10107:27;;;;;;;;;;;:36;;;;10017:133:::0;;:::o;979:30::-;;;;;;;;;;;;;:::o;10440:153::-;10531:13;10563:23;10578:7;10563:14;:23::i;:::-;10556:30;;10440:153;;;:::o;9825:186::-;1094:13:23;:11;:13::i;:::-;9933:1:42::1;9915:14;:19;;9907:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;9990:14;9969:18;:35;;;;9825:186:::0;:::o;1073:52::-;1118:7;1073:52;:::o;1486:49::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1350:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;4388:162:29:-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;2074:198:23:-;1094:13;:11;:13::i;:::-;2182:1:::1;2162:22;;:8;:22;;::::0;2154:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;2237:28;2256:8;2237:18;:28::i;:::-;2074:198:::0;:::o;535:205:32:-;637:4;682:10;675:18;;660:33;;;:11;:33;;;;:73;;;;697:36;721:11;697:23;:36::i;:::-;660:73;653:80;;535:205;;;:::o;1359:130:23:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;13240:133:29:-;13321:16;13329:7;13321;:16::i;:::-;13313:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13240:133;:::o;640:96:35:-;693:7;719:10;712:17;;640:96;:::o;12572:171:29:-;12673:2;12646:15;:24;12662:7;12646:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12728:7;12724:2;12690:46;;12699:23;12714:7;12699:14;:23::i;:::-;12690:46;;;;;;;;;;;;12572:171;;:::o;7404:261::-;7497:4;7513:13;7529:23;7544:7;7529:14;:23::i;:::-;7513:39;;7581:5;7570:16;;:7;:16;;;:52;;;;7590:32;7607:5;7614:7;7590:16;:32::i;:::-;7570:52;:87;;;;7650:7;7626:31;;:20;7638:7;7626:11;:20::i;:::-;:31;;;7570:87;7562:96;;;7404:261;;;;:::o;11257:1203::-;11381:4;11354:31;;:23;11369:7;11354:14;:23::i;:::-;:31;;;11346:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11459:1;11445:16;;:2;:16;;;11437:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11513:42;11534:4;11540:2;11544:7;11553:1;11513:20;:42::i;:::-;11682:4;11655:31;;:23;11670:7;11655:14;:23::i;:::-;:31;;;11647:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11797:15;:24;11813:7;11797:24;;;;;;;;;;;;11790:31;;;;;;;;;;;12284:1;12265:9;:15;12275:4;12265:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12316:1;12299:9;:13;12309:2;12299:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12356:2;12337:7;:16;12345:7;12337:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12393:7;12389:2;12374:27;;12383:4;12374:27;;;;;;;;;;;;12412:41;12432:4;12438:2;12442:7;12451:1;12412:19;:41::i;:::-;11257:1203;;;:::o;2336:287:28:-;1759:1;2468:7;;:19;2460:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1759:1;2598:7;:18;;;;2336:287::o;1767:106:27:-;1837:8;:6;:8::i;:::-;1836:9;1828:38;;;;;;;;;;;;:::i;:::-;;;;;;;;;1767:106::o;10937:338:42:-;11030:7;11050;11059:9;11070;11083:26;11098:10;11083:14;:26::i;:::-;11049:60;;;;;;11119:20;11205:12;11152:66;;;;;;;;:::i;:::-;;;;;;;;;;;;;11142:77;;;;;;11119:100;;11236:32;11246:12;11260:1;11263;11266;11236:32;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11229:39;;;;;;10937:338;;;;:::o;7016:900::-;7139:15;7157:25;:15;:23;:25::i;:::-;7139:43;;7192:27;:15;:25;:27::i;:::-;7230:22;7240:2;7244:7;7230:9;:22::i;:::-;7316:251;;;;;;;;7356:13;7316:251;;;;7399:15;7316:251;;;;7442:12;7316:251;;;;7482:12;7316:251;;;;7525:16;:31;7542:13;7525:31;;;;;;;;;;;7316:251;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7293:11;:20;7305:7;7293:20;;;;;;;;;;;:274;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;7622:15;:19;7638:2;7622:19;;;;;;;;;;;;;;;7647:7;7622:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7765:1;7720:19;:34;7740:13;7720:34;;;;;;;;;;;7714:48;;;;;:::i;:::-;;;:52;7710:140;;;7782:57;7795:7;7804:19;:34;7824:13;7804:34;;;;;;;;;;;7782:57;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:12;:57::i;:::-;7710:140;7895:13;7886:7;7882:2;7865:44;;;;;;;;;;;;7129:787;7016:900;;;;:::o;2629:209:28:-;1716:1;2809:7;:22;;;;2629:209::o;2433:117:27:-;1486:16;:14;:16::i;:::-;2501:5:::1;2491:7;;:15;;;;;;;;;;;;;;;;;;2521:22;2530:12;:10;:12::i;:::-;2521:22;;;;;;:::i;:::-;;;;;;;;2433:117::o:0;6702:115:29:-;6768:7;6794;:16;6802:7;6794:16;;;;;;;;;;;;;;;;;;;;;6787:23;;6702:115;;;:::o;2426:187:23:-;2499:16;2518:6;;;;;;;;;;;2499:25;;2543:8;2534:6;;:17;;;;;;;;;;;;;;;;;;2597:8;2566:40;;2587:8;2566:40;;;;;;;;;;;;2489:124;2426:187;:::o;2186:115:27:-;1239:19;:17;:19::i;:::-;2255:4:::1;2245:7;;:14;;;;;;;;;;;;;;;;;;2274:20;2281:12;:10;:12::i;:::-;2274:20;;;;;;:::i;:::-;;;;;;;;2186:115::o:0;7120:126:29:-;7185:4;7237:1;7208:31;;:17;7217:7;7208:8;:17::i;:::-;:31;;;;7201:38;;7120:126;;;:::o;12879:277::-;12999:8;12990:17;;:5;:17;;;12982:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13085:8;13047:18;:25;13066:5;13047:25;;;;;;;;;;;;;;;:35;13073:8;13047:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13130:8;13108:41;;13123:5;13108:41;;;13140:8;13108:41;;;;;;:::i;:::-;;;;;;;;12879:277;;;:::o;6326:267::-;6438:28;6448:4;6454:2;6458:7;6438:9;:28::i;:::-;6484:47;6507:4;6513:2;6517:7;6526:4;6484:22;:47::i;:::-;6476:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6326:267;;;;:::o;806:608:32:-;879:13;904:23;919:7;904:14;:23::i;:::-;938;964:10;:19;975:7;964:19;;;;;;;;;;;938:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;993:18;1014:10;:8;:10::i;:::-;993:31;;1119:1;1103:4;1097:18;:23;1093:70;;1143:9;1136:16;;;;;;1093:70;1291:1;1271:9;1265:23;:27;1261:106;;;1339:4;1345:9;1322:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1308:48;;;;;;1261:106;1384:23;1399:7;1384:14;:23::i;:::-;1377:30;;;;806:608;;;;:::o;1570:300:29:-;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;15472:116::-;;;;;:::o;16294:115::-;;;;;:::o;11281:315:42:-;11346:7;11355:9;11366;11409:2;11395:3;:10;:16;11387:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;11493:2;11488:3;11484:12;11478:19;11473:24;;11530:2;11525:3;11521:12;11515:19;11510:24;;11575:2;11570:3;11566:12;11560:19;11557:1;11552:28;11547:33;;11281:315;;;;;:::o;827:112:36:-;892:7;918;:14;;;911:21;;827:112;;;:::o;945:123::-;1050:1;1032:7;:14;;;:19;;;;;;;;;;;945:123;:::o;7995:108:29:-;8070:26;8080:2;8084:7;8070:26;;;;;;;;;;;;:9;:26::i;:::-;7995:108;;:::o;1599:253:32:-;1698:16;1706:7;1698;:16::i;:::-;1690:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;1797:9;1775:10;:19;1786:7;1775:19;;;;;;;;;;;:31;;;;;;:::i;:::-;;1822:23;1837:7;1822:23;;;;;;:::i;:::-;;;;;;;;1599:253;;:::o;1945:106:27:-;2011:8;:6;:8::i;:::-;2003:41;;;;;;;;;;;;:::i;:::-;;;;;;;;;1945:106::o;13925:831:29:-;14074:4;14094:15;:2;:13;;;:15::i;:::-;14090:660;;;14145:2;14129:36;;;14166:12;:10;:12::i;:::-;14180:4;14186:7;14195:4;14129:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14125:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14384:1;14367:6;:13;:18;14363:321;;14409:60;;;;;;;;;;:::i;:::-;;;;;;;;14363:321;14636:6;14630:13;14621:6;14617:2;14613:15;14606:38;14125:573;14260:41;;;14250:51;;;:6;:51;;;;14243:58;;;;;14090:660;14735:4;14728:11;;13925:831;;;;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;829:155:38:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;8324:279:29:-;8418:18;8424:2;8428:7;8418:5;:18::i;:::-;8467:53;8498:1;8502:2;8506:7;8515:4;8467:22;:53::i;:::-;8446:150;;;;;;;;;;;;:::i;:::-;;;;;;;;;8324:279;;;:::o;1412:320:34:-;1472:4;1724:1;1702:7;:19;;;:23;1695:30;;1412:320;;;:::o;447:696:37:-;503:13;552:14;589:1;569:17;580:5;569:10;:17::i;:::-;:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;604:41;;659:11;785:6;781:2;777:15;769:6;765:28;758:35;;820:280;827:4;820:280;;;851:5;;;;;;;;990:8;985:2;978:5;974:14;969:30;964:3;956:44;1044:2;1035:11;;;;;;:::i;:::-;;;;;1077:1;1068:5;:10;820:280;1064:21;820:280;1120:6;1113:13;;;;;447:696;;;:::o;8925:920:29:-;9018:1;9004:16;;:2;:16;;;8996:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9076:16;9084:7;9076;:16::i;:::-;9075:17;9067:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9136:48;9165:1;9169:2;9173:7;9182:1;9136:20;:48::i;:::-;9280:16;9288:7;9280;:16::i;:::-;9279:17;9271:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9688:1;9671:9;:13;9681:2;9671:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9729:2;9710:7;:16;9718:7;9710:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9772:7;9768:2;9747:33;;9764:1;9747:33;;;;;;;;;;;;9791:47;9819:1;9823:2;9827:7;9836:1;9791:19;:47::i;:::-;8925:920;;:::o;10139:916:40:-;10192:7;10211:14;10228:1;10211:18;;10276:8;10267:5;:17;10263:103;;10313:8;10304:17;;;;;;:::i;:::-;;;;;10349:2;10339:12;;;;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;;;;:::i;:::-;;;;;10465:2;10455:12;;;;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;;;;:::i;:::-;;;;;10581:2;10571:12;;;;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;;;;:::i;:::-;;;;;10695:1;10685:11;;;;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;;;;:::i;:::-;;;;;10808:1;10798:11;;;;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;;;;:::i;:::-;;;;;10921:1;10911:11;;;;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;;;;10950:66;11042:6;11035:13;;;10139:916;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:44:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:122::-;1674:24;1692:5;1674:24;:::i;:::-;1667:5;1664:35;1654:63;;1713:1;1710;1703:12;1654:63;1601:122;:::o;1729:139::-;1775:5;1813:6;1800:20;1791:29;;1829:33;1856:5;1829:33;:::i;:::-;1729:139;;;;:::o;1874:329::-;1933:6;1982:2;1970:9;1961:7;1957:23;1953:32;1950:119;;;1988:79;;:::i;:::-;1950:119;2108:1;2133:53;2178:7;2169:6;2158:9;2154:22;2133:53;:::i;:::-;2123:63;;2079:117;1874:329;;;;:::o;2209:99::-;2261:6;2295:5;2289:12;2279:22;;2209:99;;;:::o;2314:169::-;2398:11;2432:6;2427:3;2420:19;2472:4;2467:3;2463:14;2448:29;;2314:169;;;;:::o;2489:139::-;2578:6;2573:3;2568;2562:23;2619:1;2610:6;2605:3;2601:16;2594:27;2489:139;;;:::o;2634:102::-;2675:6;2726:2;2722:7;2717:2;2710:5;2706:14;2702:28;2692:38;;2634:102;;;:::o;2742:377::-;2830:3;2858:39;2891:5;2858:39;:::i;:::-;2913:71;2977:6;2972:3;2913:71;:::i;:::-;2906:78;;2993:65;3051:6;3046:3;3039:4;3032:5;3028:16;2993:65;:::i;:::-;3083:29;3105:6;3083:29;:::i;:::-;3078:3;3074:39;3067:46;;2834:285;2742:377;;;;:::o;3125:313::-;3238:4;3276:2;3265:9;3261:18;3253:26;;3325:9;3319:4;3315:20;3311:1;3300:9;3296:17;3289:47;3353:78;3426:4;3417:6;3353:78;:::i;:::-;3345:86;;3125:313;;;;:::o;3444:118::-;3531:24;3549:5;3531:24;:::i;:::-;3526:3;3519:37;3444:118;;:::o;3568:222::-;3661:4;3699:2;3688:9;3684:18;3676:26;;3712:71;3780:1;3769:9;3765:17;3756:6;3712:71;:::i;:::-;3568:222;;;;:::o;3796:126::-;3833:7;3873:42;3866:5;3862:54;3851:65;;3796:126;;;:::o;3928:96::-;3965:7;3994:24;4012:5;3994:24;:::i;:::-;3983:35;;3928:96;;;:::o;4030:118::-;4117:24;4135:5;4117:24;:::i;:::-;4112:3;4105:37;4030:118;;:::o;4154:222::-;4247:4;4285:2;4274:9;4270:18;4262:26;;4298:71;4366:1;4355:9;4351:17;4342:6;4298:71;:::i;:::-;4154:222;;;;:::o;4382:122::-;4455:24;4473:5;4455:24;:::i;:::-;4448:5;4445:35;4435:63;;4494:1;4491;4484:12;4435:63;4382:122;:::o;4510:139::-;4556:5;4594:6;4581:20;4572:29;;4610:33;4637:5;4610:33;:::i;:::-;4510:139;;;;:::o;4655:474::-;4723:6;4731;4780:2;4768:9;4759:7;4755:23;4751:32;4748:119;;;4786:79;;:::i;:::-;4748:119;4906:1;4931:53;4976:7;4967:6;4956:9;4952:22;4931:53;:::i;:::-;4921:63;;4877:117;5033:2;5059:53;5104:7;5095:6;5084:9;5080:22;5059:53;:::i;:::-;5049:63;;5004:118;4655:474;;;;;:::o;5135:117::-;5244:1;5241;5234:12;5258:117;5367:1;5364;5357:12;5381:180;5429:77;5426:1;5419:88;5526:4;5523:1;5516:15;5550:4;5547:1;5540:15;5567:281;5650:27;5672:4;5650:27;:::i;:::-;5642:6;5638:40;5780:6;5768:10;5765:22;5744:18;5732:10;5729:34;5726:62;5723:88;;;5791:18;;:::i;:::-;5723:88;5831:10;5827:2;5820:22;5610:238;5567:281;;:::o;5854:129::-;5888:6;5915:20;;:::i;:::-;5905:30;;5944:33;5972:4;5964:6;5944:33;:::i;:::-;5854:129;;;:::o;5989:308::-;6051:4;6141:18;6133:6;6130:30;6127:56;;;6163:18;;:::i;:::-;6127:56;6201:29;6223:6;6201:29;:::i;:::-;6193:37;;6285:4;6279;6275:15;6267:23;;5989:308;;;:::o;6303:148::-;6401:6;6396:3;6391;6378:30;6442:1;6433:6;6428:3;6424:16;6417:27;6303:148;;;:::o;6457:425::-;6535:5;6560:66;6576:49;6618:6;6576:49;:::i;:::-;6560:66;:::i;:::-;6551:75;;6649:6;6642:5;6635:21;6687:4;6680:5;6676:16;6725:3;6716:6;6711:3;6707:16;6704:25;6701:112;;;6732:79;;:::i;:::-;6701:112;6822:54;6869:6;6864:3;6859;6822:54;:::i;:::-;6541:341;6457:425;;;;;:::o;6902:340::-;6958:5;7007:3;7000:4;6992:6;6988:17;6984:27;6974:122;;7015:79;;:::i;:::-;6974:122;7132:6;7119:20;7157:79;7232:3;7224:6;7217:4;7209:6;7205:17;7157:79;:::i;:::-;7148:88;;6964:278;6902:340;;;;:::o;7248:654::-;7326:6;7334;7383:2;7371:9;7362:7;7358:23;7354:32;7351:119;;;7389:79;;:::i;:::-;7351:119;7509:1;7534:53;7579:7;7570:6;7559:9;7555:22;7534:53;:::i;:::-;7524:63;;7480:117;7664:2;7653:9;7649:18;7636:32;7695:18;7687:6;7684:30;7681:117;;;7717:79;;:::i;:::-;7681:117;7822:63;7877:7;7868:6;7857:9;7853:22;7822:63;:::i;:::-;7812:73;;7607:288;7248:654;;;;;:::o;7908:329::-;7967:6;8016:2;8004:9;7995:7;7991:23;7987:32;7984:119;;;8022:79;;:::i;:::-;7984:119;8142:1;8167:53;8212:7;8203:6;8192:9;8188:22;8167:53;:::i;:::-;8157:63;;8113:117;7908:329;;;;:::o;8243:619::-;8320:6;8328;8336;8385:2;8373:9;8364:7;8360:23;8356:32;8353:119;;;8391:79;;:::i;:::-;8353:119;8511:1;8536:53;8581:7;8572:6;8561:9;8557:22;8536:53;:::i;:::-;8526:63;;8482:117;8638:2;8664:53;8709:7;8700:6;8689:9;8685:22;8664:53;:::i;:::-;8654:63;;8609:118;8766:2;8792:53;8837:7;8828:6;8817:9;8813:22;8792:53;:::i;:::-;8782:63;;8737:118;8243:619;;;;;:::o;8868:114::-;8935:6;8969:5;8963:12;8953:22;;8868:114;;;:::o;8988:184::-;9087:11;9121:6;9116:3;9109:19;9161:4;9156:3;9152:14;9137:29;;8988:184;;;;:::o;9178:132::-;9245:4;9268:3;9260:11;;9298:4;9293:3;9289:14;9281:22;;9178:132;;;:::o;9316:108::-;9393:24;9411:5;9393:24;:::i;:::-;9388:3;9381:37;9316:108;;:::o;9430:179::-;9499:10;9520:46;9562:3;9554:6;9520:46;:::i;:::-;9598:4;9593:3;9589:14;9575:28;;9430:179;;;;:::o;9615:113::-;9685:4;9717;9712:3;9708:14;9700:22;;9615:113;;;:::o;9764:732::-;9883:3;9912:54;9960:5;9912:54;:::i;:::-;9982:86;10061:6;10056:3;9982:86;:::i;:::-;9975:93;;10092:56;10142:5;10092:56;:::i;:::-;10171:7;10202:1;10187:284;10212:6;10209:1;10206:13;10187:284;;;10288:6;10282:13;10315:63;10374:3;10359:13;10315:63;:::i;:::-;10308:70;;10401:60;10454:6;10401:60;:::i;:::-;10391:70;;10247:224;10234:1;10231;10227:9;10222:14;;10187:284;;;10191:14;10487:3;10480:10;;9888:608;;;9764:732;;;;:::o;10502:373::-;10645:4;10683:2;10672:9;10668:18;10660:26;;10732:9;10726:4;10722:20;10718:1;10707:9;10703:17;10696:47;10760:108;10863:4;10854:6;10760:108;:::i;:::-;10752:116;;10502:373;;;;:::o;10881:307::-;10942:4;11032:18;11024:6;11021:30;11018:56;;;11054:18;;:::i;:::-;11018:56;11092:29;11114:6;11092:29;:::i;:::-;11084:37;;11176:4;11170;11166:15;11158:23;;10881:307;;;:::o;11194:423::-;11271:5;11296:65;11312:48;11353:6;11312:48;:::i;:::-;11296:65;:::i;:::-;11287:74;;11384:6;11377:5;11370:21;11422:4;11415:5;11411:16;11460:3;11451:6;11446:3;11442:16;11439:25;11436:112;;;11467:79;;:::i;:::-;11436:112;11557:54;11604:6;11599:3;11594;11557:54;:::i;:::-;11277:340;11194:423;;;;;:::o;11636:338::-;11691:5;11740:3;11733:4;11725:6;11721:17;11717:27;11707:122;;11748:79;;:::i;:::-;11707:122;11865:6;11852:20;11890:78;11964:3;11956:6;11949:4;11941:6;11937:17;11890:78;:::i;:::-;11881:87;;11697:277;11636:338;;;;:::o;11980:507::-;12048:6;12097:2;12085:9;12076:7;12072:23;12068:32;12065:119;;;12103:79;;:::i;:::-;12065:119;12251:1;12240:9;12236:17;12223:31;12281:18;12273:6;12270:30;12267:117;;;12303:79;;:::i;:::-;12267:117;12408:62;12462:7;12453:6;12442:9;12438:22;12408:62;:::i;:::-;12398:72;;12194:286;11980:507;;;;:::o;12493:114::-;12560:6;12594:5;12588:12;12578:22;;12493:114;;;:::o;12613:184::-;12712:11;12746:6;12741:3;12734:19;12786:4;12781:3;12777:14;12762:29;;12613:184;;;;:::o;12803:132::-;12870:4;12893:3;12885:11;;12923:4;12918:3;12914:14;12906:22;;12803:132;;;:::o;12941:108::-;13018:24;13036:5;13018:24;:::i;:::-;13013:3;13006:37;12941:108;;:::o;13055:179::-;13124:10;13145:46;13187:3;13179:6;13145:46;:::i;:::-;13223:4;13218:3;13214:14;13200:28;;13055:179;;;;:::o;13240:113::-;13310:4;13342;13337:3;13333:14;13325:22;;13240:113;;;:::o;13389:732::-;13508:3;13537:54;13585:5;13537:54;:::i;:::-;13607:86;13686:6;13681:3;13607:86;:::i;:::-;13600:93;;13717:56;13767:5;13717:56;:::i;:::-;13796:7;13827:1;13812:284;13837:6;13834:1;13831:13;13812:284;;;13913:6;13907:13;13940:63;13999:3;13984:13;13940:63;:::i;:::-;13933:70;;14026:60;14079:6;14026:60;:::i;:::-;14016:70;;13872:224;13859:1;13856;13852:9;13847:14;;13812:284;;;13816:14;14112:3;14105:10;;13513:608;;;13389:732;;;;:::o;14127:634::-;14348:4;14386:2;14375:9;14371:18;14363:26;;14435:9;14429:4;14425:20;14421:1;14410:9;14406:17;14399:47;14463:108;14566:4;14557:6;14463:108;:::i;:::-;14455:116;;14618:9;14612:4;14608:20;14603:2;14592:9;14588:18;14581:48;14646:108;14749:4;14740:6;14646:108;:::i;:::-;14638:116;;14127:634;;;;;:::o;14767:474::-;14835:6;14843;14892:2;14880:9;14871:7;14867:23;14863:32;14860:119;;;14898:79;;:::i;:::-;14860:119;15018:1;15043:53;15088:7;15079:6;15068:9;15064:22;15043:53;:::i;:::-;15033:63;;14989:117;15145:2;15171:53;15216:7;15207:6;15196:9;15192:22;15171:53;:::i;:::-;15161:63;;15116:118;14767:474;;;;;:::o;15247:159::-;15321:11;15355:6;15350:3;15343:19;15395:4;15390:3;15386:14;15371:29;;15247:159;;;;:::o;15412:357::-;15490:3;15518:39;15551:5;15518:39;:::i;:::-;15573:61;15627:6;15622:3;15573:61;:::i;:::-;15566:68;;15643:65;15701:6;15696:3;15689:4;15682:5;15678:16;15643:65;:::i;:::-;15733:29;15755:6;15733:29;:::i;:::-;15728:3;15724:39;15717:46;;15494:275;15412:357;;;;:::o;15839:1182::-;15966:3;16002:4;15997:3;15993:14;16098:4;16091:5;16087:16;16081:23;16117:63;16174:4;16169:3;16165:14;16151:12;16117:63;:::i;:::-;16017:173;16282:4;16275:5;16271:16;16265:23;16301:63;16358:4;16353:3;16349:14;16335:12;16301:63;:::i;:::-;16200:174;16464:4;16457:5;16453:16;16447:23;16483:63;16540:4;16535:3;16531:14;16517:12;16483:63;:::i;:::-;16384:172;16646:4;16639:5;16635:16;16629:23;16665:63;16722:4;16717:3;16713:14;16699:12;16665:63;:::i;:::-;16566:172;16831:4;16824:5;16820:16;16814:23;16884:3;16878:4;16874:14;16867:4;16862:3;16858:14;16851:38;16910:73;16978:4;16964:12;16910:73;:::i;:::-;16902:81;;16748:246;17011:4;17004:11;;15971:1050;15839:1182;;;;:::o;17027:389::-;17178:4;17216:2;17205:9;17201:18;17193:26;;17265:9;17259:4;17255:20;17251:1;17240:9;17236:17;17229:47;17293:116;17404:4;17395:6;17293:116;:::i;:::-;17285:124;;17027:389;;;;:::o;17422:116::-;17492:21;17507:5;17492:21;:::i;:::-;17485:5;17482:32;17472:60;;17528:1;17525;17518:12;17472:60;17422:116;:::o;17544:133::-;17587:5;17625:6;17612:20;17603:29;;17641:30;17665:5;17641:30;:::i;:::-;17544:133;;;;:::o;17683:468::-;17748:6;17756;17805:2;17793:9;17784:7;17780:23;17776:32;17773:119;;;17811:79;;:::i;:::-;17773:119;17931:1;17956:53;18001:7;17992:6;17981:9;17977:22;17956:53;:::i;:::-;17946:63;;17902:117;18058:2;18084:50;18126:7;18117:6;18106:9;18102:22;18084:50;:::i;:::-;18074:60;;18029:115;17683:468;;;;;:::o;18157:943::-;18252:6;18260;18268;18276;18325:3;18313:9;18304:7;18300:23;18296:33;18293:120;;;18332:79;;:::i;:::-;18293:120;18452:1;18477:53;18522:7;18513:6;18502:9;18498:22;18477:53;:::i;:::-;18467:63;;18423:117;18579:2;18605:53;18650:7;18641:6;18630:9;18626:22;18605:53;:::i;:::-;18595:63;;18550:118;18707:2;18733:53;18778:7;18769:6;18758:9;18754:22;18733:53;:::i;:::-;18723:63;;18678:118;18863:2;18852:9;18848:18;18835:32;18894:18;18886:6;18883:30;18880:117;;;18916:79;;:::i;:::-;18880:117;19021:62;19075:7;19066:6;19055:9;19051:22;19021:62;:::i;:::-;19011:72;;18806:287;18157:943;;;;;;;:::o;19106:755::-;19331:4;19369:3;19358:9;19354:19;19346:27;;19383:71;19451:1;19440:9;19436:17;19427:6;19383:71;:::i;:::-;19464:72;19532:2;19521:9;19517:18;19508:6;19464:72;:::i;:::-;19546;19614:2;19603:9;19599:18;19590:6;19546:72;:::i;:::-;19628;19696:2;19685:9;19681:18;19672:6;19628:72;:::i;:::-;19748:9;19742:4;19738:20;19732:3;19721:9;19717:19;19710:49;19776:78;19849:4;19840:6;19776:78;:::i;:::-;19768:86;;19106:755;;;;;;;;:::o;19867:652::-;20066:4;20104:3;20093:9;20089:19;20081:27;;20118:71;20186:1;20175:9;20171:17;20162:6;20118:71;:::i;:::-;20199:72;20267:2;20256:9;20252:18;20243:6;20199:72;:::i;:::-;20281;20349:2;20338:9;20334:18;20325:6;20281:72;:::i;:::-;20363;20431:2;20420:9;20416:18;20407:6;20363:72;:::i;:::-;20445:67;20507:3;20496:9;20492:19;20483:6;20445:67;:::i;:::-;19867:652;;;;;;;;:::o;20525:474::-;20593:6;20601;20650:2;20638:9;20629:7;20625:23;20621:32;20618:119;;;20656:79;;:::i;:::-;20618:119;20776:1;20801:53;20846:7;20837:6;20826:9;20822:22;20801:53;:::i;:::-;20791:63;;20747:117;20903:2;20929:53;20974:7;20965:6;20954:9;20950:22;20929:53;:::i;:::-;20919:63;;20874:118;20525:474;;;;;:::o;21005:165::-;21145:17;21141:1;21133:6;21129:14;21122:41;21005:165;:::o;21176:366::-;21318:3;21339:67;21403:2;21398:3;21339:67;:::i;:::-;21332:74;;21415:93;21504:3;21415:93;:::i;:::-;21533:2;21528:3;21524:12;21517:19;;21176:366;;;:::o;21548:419::-;21714:4;21752:2;21741:9;21737:18;21729:26;;21801:9;21795:4;21791:20;21787:1;21776:9;21772:17;21765:47;21829:131;21955:4;21829:131;:::i;:::-;21821:139;;21548:419;;;:::o;21973:180::-;22021:77;22018:1;22011:88;22118:4;22115:1;22108:15;22142:4;22139:1;22132:15;22159:191;22199:3;22218:20;22236:1;22218:20;:::i;:::-;22213:25;;22252:20;22270:1;22252:20;:::i;:::-;22247:25;;22295:1;22292;22288:9;22281:16;;22316:3;22313:1;22310:10;22307:36;;;22323:18;;:::i;:::-;22307:36;22159:191;;;;:::o;22356:180::-;22404:77;22401:1;22394:88;22501:4;22498:1;22491:15;22525:4;22522:1;22515:15;22542:320;22586:6;22623:1;22617:4;22613:12;22603:22;;22670:1;22664:4;22660:12;22691:18;22681:81;;22747:4;22739:6;22735:17;22725:27;;22681:81;22809:2;22801:6;22798:14;22778:18;22775:38;22772:84;;22828:18;;:::i;:::-;22772:84;22593:269;22542:320;;;:::o;22868:220::-;23008:34;23004:1;22996:6;22992:14;22985:58;23077:3;23072:2;23064:6;23060:15;23053:28;22868:220;:::o;23094:366::-;23236:3;23257:67;23321:2;23316:3;23257:67;:::i;:::-;23250:74;;23333:93;23422:3;23333:93;:::i;:::-;23451:2;23446:3;23442:12;23435:19;;23094:366;;;:::o;23466:419::-;23632:4;23670:2;23659:9;23655:18;23647:26;;23719:9;23713:4;23709:20;23705:1;23694:9;23690:17;23683:47;23747:131;23873:4;23747:131;:::i;:::-;23739:139;;23466:419;;;:::o;23891:248::-;24031:34;24027:1;24019:6;24015:14;24008:58;24100:31;24095:2;24087:6;24083:15;24076:56;23891:248;:::o;24145:366::-;24287:3;24308:67;24372:2;24367:3;24308:67;:::i;:::-;24301:74;;24384:93;24473:3;24384:93;:::i;:::-;24502:2;24497:3;24493:12;24486:19;;24145:366;;;:::o;24517:419::-;24683:4;24721:2;24710:9;24706:18;24698:26;;24770:9;24764:4;24760:20;24756:1;24745:9;24741:17;24734:47;24798:131;24924:4;24798:131;:::i;:::-;24790:139;;24517:419;;;:::o;24942:141::-;24991:4;25014:3;25006:11;;25037:3;25034:1;25027:14;25071:4;25068:1;25058:18;25050:26;;24942:141;;;:::o;25089:93::-;25126:6;25173:2;25168;25161:5;25157:14;25153:23;25143:33;;25089:93;;;:::o;25188:107::-;25232:8;25282:5;25276:4;25272:16;25251:37;;25188:107;;;;:::o;25301:393::-;25370:6;25420:1;25408:10;25404:18;25443:97;25473:66;25462:9;25443:97;:::i;:::-;25561:39;25591:8;25580:9;25561:39;:::i;:::-;25549:51;;25633:4;25629:9;25622:5;25618:21;25609:30;;25682:4;25672:8;25668:19;25661:5;25658:30;25648:40;;25377:317;;25301:393;;;;;:::o;25700:60::-;25728:3;25749:5;25742:12;;25700:60;;;:::o;25766:142::-;25816:9;25849:53;25867:34;25876:24;25894:5;25876:24;:::i;:::-;25867:34;:::i;:::-;25849:53;:::i;:::-;25836:66;;25766:142;;;:::o;25914:75::-;25957:3;25978:5;25971:12;;25914:75;;;:::o;25995:269::-;26105:39;26136:7;26105:39;:::i;:::-;26166:91;26215:41;26239:16;26215:41;:::i;:::-;26207:6;26200:4;26194:11;26166:91;:::i;:::-;26160:4;26153:105;26071:193;25995:269;;;:::o;26270:73::-;26315:3;26336:1;26329:8;;26270:73;:::o;26349:189::-;26426:32;;:::i;:::-;26467:65;26525:6;26517;26511:4;26467:65;:::i;:::-;26402:136;26349:189;;:::o;26544:186::-;26604:120;26621:3;26614:5;26611:14;26604:120;;;26675:39;26712:1;26705:5;26675:39;:::i;:::-;26648:1;26641:5;26637:13;26628:22;;26604:120;;;26544:186;;:::o;26736:543::-;26837:2;26832:3;26829:11;26826:446;;;26871:38;26903:5;26871:38;:::i;:::-;26955:29;26973:10;26955:29;:::i;:::-;26945:8;26941:44;27138:2;27126:10;27123:18;27120:49;;;27159:8;27144:23;;27120:49;27182:80;27238:22;27256:3;27238:22;:::i;:::-;27228:8;27224:37;27211:11;27182:80;:::i;:::-;26841:431;;26826:446;26736:543;;;:::o;27285:117::-;27339:8;27389:5;27383:4;27379:16;27358:37;;27285:117;;;;:::o;27408:169::-;27452:6;27485:51;27533:1;27529:6;27521:5;27518:1;27514:13;27485:51;:::i;:::-;27481:56;27566:4;27560;27556:15;27546:25;;27459:118;27408:169;;;;:::o;27582:295::-;27658:4;27804:29;27829:3;27823:4;27804:29;:::i;:::-;27796:37;;27866:3;27863:1;27859:11;27853:4;27850:21;27842:29;;27582:295;;;;:::o;27882:1395::-;27999:37;28032:3;27999:37;:::i;:::-;28101:18;28093:6;28090:30;28087:56;;;28123:18;;:::i;:::-;28087:56;28167:38;28199:4;28193:11;28167:38;:::i;:::-;28252:67;28312:6;28304;28298:4;28252:67;:::i;:::-;28346:1;28370:4;28357:17;;28402:2;28394:6;28391:14;28419:1;28414:618;;;;29076:1;29093:6;29090:77;;;29142:9;29137:3;29133:19;29127:26;29118:35;;29090:77;29193:67;29253:6;29246:5;29193:67;:::i;:::-;29187:4;29180:81;29049:222;28384:887;;28414:618;28466:4;28462:9;28454:6;28450:22;28500:37;28532:4;28500:37;:::i;:::-;28559:1;28573:208;28587:7;28584:1;28581:14;28573:208;;;28666:9;28661:3;28657:19;28651:26;28643:6;28636:42;28717:1;28709:6;28705:14;28695:24;;28764:2;28753:9;28749:18;28736:31;;28610:4;28607:1;28603:12;28598:17;;28573:208;;;28809:6;28800:7;28797:19;28794:179;;;28867:9;28862:3;28858:19;28852:26;28910:48;28952:4;28944:6;28940:17;28929:9;28910:48;:::i;:::-;28902:6;28895:64;28817:156;28794:179;29019:1;29015;29007:6;29003:14;28999:22;28993:4;28986:36;28421:611;;;28384:887;;27974:1303;;;27882:1395;;:::o;29283:172::-;29423:24;29419:1;29411:6;29407:14;29400:48;29283:172;:::o;29461:366::-;29603:3;29624:67;29688:2;29683:3;29624:67;:::i;:::-;29617:74;;29700:93;29789:3;29700:93;:::i;:::-;29818:2;29813:3;29809:12;29802:19;;29461:366;;;:::o;29833:419::-;29999:4;30037:2;30026:9;30022:18;30014:26;;30086:9;30080:4;30076:20;30072:1;30061:9;30057:17;30050:47;30114:131;30240:4;30114:131;:::i;:::-;30106:139;;29833:419;;;:::o;30258:232::-;30398:34;30394:1;30386:6;30382:14;30375:58;30467:15;30462:2;30454:6;30450:15;30443:40;30258:232;:::o;30496:366::-;30638:3;30659:67;30723:2;30718:3;30659:67;:::i;:::-;30652:74;;30735:93;30824:3;30735:93;:::i;:::-;30853:2;30848:3;30844:12;30837:19;;30496:366;;;:::o;30868:419::-;31034:4;31072:2;31061:9;31057:18;31049:26;;31121:9;31115:4;31111:20;31107:1;31096:9;31092:17;31085:47;31149:131;31275:4;31149:131;:::i;:::-;31141:139;;30868:419;;;:::o;31293:170::-;31433:22;31429:1;31421:6;31417:14;31410:46;31293:170;:::o;31469:366::-;31611:3;31632:67;31696:2;31691:3;31632:67;:::i;:::-;31625:74;;31708:93;31797:3;31708:93;:::i;:::-;31826:2;31821:3;31817:12;31810:19;;31469:366;;;:::o;31841:419::-;32007:4;32045:2;32034:9;32030:18;32022:26;;32094:9;32088:4;32084:20;32080:1;32069:9;32065:17;32058:47;32122:131;32248:4;32122:131;:::i;:::-;32114:139;;31841:419;;;:::o;32266:178::-;32406:30;32402:1;32394:6;32390:14;32383:54;32266:178;:::o;32450:366::-;32592:3;32613:67;32677:2;32672:3;32613:67;:::i;:::-;32606:74;;32689:93;32778:3;32689:93;:::i;:::-;32807:2;32802:3;32798:12;32791:19;;32450:366;;;:::o;32822:419::-;32988:4;33026:2;33015:9;33011:18;33003:26;;33075:9;33069:4;33065:20;33061:1;33050:9;33046:17;33039:47;33103:131;33229:4;33103:131;:::i;:::-;33095:139;;32822:419;;;:::o;33247:177::-;33387:29;33383:1;33375:6;33371:14;33364:53;33247:177;:::o;33430:366::-;33572:3;33593:67;33657:2;33652:3;33593:67;:::i;:::-;33586:74;;33669:93;33758:3;33669:93;:::i;:::-;33787:2;33782:3;33778:12;33771:19;;33430:366;;;:::o;33802:419::-;33968:4;34006:2;33995:9;33991:18;33983:26;;34055:9;34049:4;34045:20;34041:1;34030:9;34026:17;34019:47;34083:131;34209:4;34083:131;:::i;:::-;34075:139;;33802:419;;;:::o;34227:94::-;34260:8;34308:5;34304:2;34300:14;34279:35;;34227:94;;;:::o;34327:::-;34366:7;34395:20;34409:5;34395:20;:::i;:::-;34384:31;;34327:94;;;:::o;34427:100::-;34466:7;34495:26;34515:5;34495:26;:::i;:::-;34484:37;;34427:100;;;:::o;34533:157::-;34638:45;34658:24;34676:5;34658:24;:::i;:::-;34638:45;:::i;:::-;34633:3;34626:58;34533:157;;:::o;34696:79::-;34735:7;34764:5;34753:16;;34696:79;;;:::o;34781:157::-;34886:45;34906:24;34924:5;34906:24;:::i;:::-;34886:45;:::i;:::-;34881:3;34874:58;34781:157;;:::o;34944:397::-;35084:3;35099:75;35170:3;35161:6;35099:75;:::i;:::-;35199:2;35194:3;35190:12;35183:19;;35212:75;35283:3;35274:6;35212:75;:::i;:::-;35312:2;35307:3;35303:12;35296:19;;35332:3;35325:10;;34944:397;;;;;:::o;35347:223::-;35487:34;35483:1;35475:6;35471:14;35464:58;35556:6;35551:2;35543:6;35539:15;35532:31;35347:223;:::o;35576:366::-;35718:3;35739:67;35803:2;35798:3;35739:67;:::i;:::-;35732:74;;35815:93;35904:3;35815:93;:::i;:::-;35933:2;35928:3;35924:12;35917:19;;35576:366;;;:::o;35948:419::-;36114:4;36152:2;36141:9;36137:18;36129:26;;36201:9;36195:4;36191:20;36187:1;36176:9;36172:17;36165:47;36229:131;36355:4;36229:131;:::i;:::-;36221:139;;35948:419;;;:::o;36373:410::-;36413:7;36436:20;36454:1;36436:20;:::i;:::-;36431:25;;36470:20;36488:1;36470:20;:::i;:::-;36465:25;;36525:1;36522;36518:9;36547:30;36565:11;36547:30;:::i;:::-;36536:41;;36726:1;36717:7;36713:15;36710:1;36707:22;36687:1;36680:9;36660:83;36637:139;;36756:18;;:::i;:::-;36637:139;36421:362;36373:410;;;;:::o;36789:180::-;36837:77;36834:1;36827:88;36934:4;36931:1;36924:15;36958:4;36955:1;36948:15;36975:185;37015:1;37032:20;37050:1;37032:20;:::i;:::-;37027:25;;37066:20;37084:1;37066:20;:::i;:::-;37061:25;;37105:1;37095:35;;37110:18;;:::i;:::-;37095:35;37152:1;37149;37145:9;37140:14;;36975:185;;;;:::o;37166:194::-;37206:4;37226:20;37244:1;37226:20;:::i;:::-;37221:25;;37260:20;37278:1;37260:20;:::i;:::-;37255:25;;37304:1;37301;37297:9;37289:17;;37328:1;37322:4;37319:11;37316:37;;;37333:18;;:::i;:::-;37316:37;37166:194;;;;:::o;37366:147::-;37467:11;37504:3;37489:18;;37366:147;;;;:::o;37519:114::-;;:::o;37639:398::-;37798:3;37819:83;37900:1;37895:3;37819:83;:::i;:::-;37812:90;;37911:93;38000:3;37911:93;:::i;:::-;38029:1;38024:3;38020:11;38013:18;;37639:398;;;:::o;38043:379::-;38227:3;38249:147;38392:3;38249:147;:::i;:::-;38242:154;;38413:3;38406:10;;38043:379;;;:::o;38428:163::-;38568:15;38564:1;38556:6;38552:14;38545:39;38428:163;:::o;38597:366::-;38739:3;38760:67;38824:2;38819:3;38760:67;:::i;:::-;38753:74;;38836:93;38925:3;38836:93;:::i;:::-;38954:2;38949:3;38945:12;38938:19;;38597:366;;;:::o;38969:419::-;39135:4;39173:2;39162:9;39158:18;39150:26;;39222:9;39216:4;39212:20;39208:1;39197:9;39193:17;39186:47;39250:131;39376:4;39250:131;:::i;:::-;39242:139;;38969:419;;;:::o;39394:332::-;39515:4;39553:2;39542:9;39538:18;39530:26;;39566:71;39634:1;39623:9;39619:17;39610:6;39566:71;:::i;:::-;39647:72;39715:2;39704:9;39700:18;39691:6;39647:72;:::i;:::-;39394:332;;;;;:::o;39732:180::-;39872:32;39868:1;39860:6;39856:14;39849:56;39732:180;:::o;39918:366::-;40060:3;40081:67;40145:2;40140:3;40081:67;:::i;:::-;40074:74;;40157:93;40246:3;40157:93;:::i;:::-;40275:2;40270:3;40266:12;40259:19;;39918:366;;;:::o;40290:419::-;40456:4;40494:2;40483:9;40479:18;40471:26;;40543:9;40537:4;40533:20;40529:1;40518:9;40514:17;40507:47;40571:131;40697:4;40571:131;:::i;:::-;40563:139;;40290:419;;;:::o;40715:167::-;40855:19;40851:1;40843:6;40839:14;40832:43;40715:167;:::o;40888:366::-;41030:3;41051:67;41115:2;41110:3;41051:67;:::i;:::-;41044:74;;41127:93;41216:3;41127:93;:::i;:::-;41245:2;41240:3;41236:12;41229:19;;40888:366;;;:::o;41260:419::-;41426:4;41464:2;41453:9;41449:18;41441:26;;41513:9;41507:4;41503:20;41499:1;41488:9;41484:17;41477:47;41541:131;41667:4;41541:131;:::i;:::-;41533:139;;41260:419;;;:::o;41685:174::-;41825:26;41821:1;41813:6;41809:14;41802:50;41685:174;:::o;41865:366::-;42007:3;42028:67;42092:2;42087:3;42028:67;:::i;:::-;42021:74;;42104:93;42193:3;42104:93;:::i;:::-;42222:2;42217:3;42213:12;42206:19;;41865:366;;;:::o;42237:419::-;42403:4;42441:2;42430:9;42426:18;42418:26;;42490:9;42484:4;42480:20;42476:1;42465:9;42461:17;42454:47;42518:131;42644:4;42518:131;:::i;:::-;42510:139;;42237:419;;;:::o;42662:228::-;42802:34;42798:1;42790:6;42786:14;42779:58;42871:11;42866:2;42858:6;42854:15;42847:36;42662:228;:::o;42896:366::-;43038:3;43059:67;43123:2;43118:3;43059:67;:::i;:::-;43052:74;;43135:93;43224:3;43135:93;:::i;:::-;43253:2;43248:3;43244:12;43237:19;;42896:366;;;:::o;43268:419::-;43434:4;43472:2;43461:9;43457:18;43449:26;;43521:9;43515:4;43511:20;43507:1;43496:9;43492:17;43485:47;43549:131;43675:4;43549:131;:::i;:::-;43541:139;;43268:419;;;:::o;43693:167::-;43833:19;43829:1;43821:6;43817:14;43810:43;43693:167;:::o;43866:366::-;44008:3;44029:67;44093:2;44088:3;44029:67;:::i;:::-;44022:74;;44105:93;44194:3;44105:93;:::i;:::-;44223:2;44218:3;44214:12;44207:19;;43866:366;;;:::o;44238:419::-;44404:4;44442:2;44431:9;44427:18;44419:26;;44491:9;44485:4;44481:20;44477:1;44466:9;44462:17;44455:47;44519:131;44645:4;44519:131;:::i;:::-;44511:139;;44238:419;;;:::o;44663:174::-;44803:26;44799:1;44791:6;44787:14;44780:50;44663:174;:::o;44843:366::-;44985:3;45006:67;45070:2;45065:3;45006:67;:::i;:::-;44999:74;;45082:93;45171:3;45082:93;:::i;:::-;45200:2;45195:3;45191:12;45184:19;;44843:366;;;:::o;45215:419::-;45381:4;45419:2;45408:9;45404:18;45396:26;;45468:9;45462:4;45458:20;45454:1;45443:9;45439:17;45432:47;45496:131;45622:4;45496:131;:::i;:::-;45488:139;;45215:419;;;:::o;45640:169::-;45780:21;45776:1;45768:6;45764:14;45757:45;45640:169;:::o;45815:366::-;45957:3;45978:67;46042:2;46037:3;45978:67;:::i;:::-;45971:74;;46054:93;46143:3;46054:93;:::i;:::-;46172:2;46167:3;46163:12;46156:19;;45815:366;;;:::o;46187:419::-;46353:4;46391:2;46380:9;46376:18;46368:26;;46440:9;46434:4;46430:20;46426:1;46415:9;46411:17;46404:47;46468:131;46594:4;46468:131;:::i;:::-;46460:139;;46187:419;;;:::o;46612:442::-;46761:4;46799:2;46788:9;46784:18;46776:26;;46812:71;46880:1;46869:9;46865:17;46856:6;46812:71;:::i;:::-;46893:72;46961:2;46950:9;46946:18;46937:6;46893:72;:::i;:::-;46975;47043:2;47032:9;47028:18;47019:6;46975:72;:::i;:::-;46612:442;;;;;;:::o;47060:168::-;47200:20;47196:1;47188:6;47184:14;47177:44;47060:168;:::o;47234:366::-;47376:3;47397:67;47461:2;47456:3;47397:67;:::i;:::-;47390:74;;47473:93;47562:3;47473:93;:::i;:::-;47591:2;47586:3;47582:12;47575:19;;47234:366;;;:::o;47606:419::-;47772:4;47810:2;47799:9;47795:18;47787:26;;47859:9;47853:4;47849:20;47845:1;47834:9;47830:17;47823:47;47887:131;48013:4;47887:131;:::i;:::-;47879:139;;47606:419;;;:::o;48031:170::-;48171:22;48167:1;48159:6;48155:14;48148:46;48031:170;:::o;48207:366::-;48349:3;48370:67;48434:2;48429:3;48370:67;:::i;:::-;48363:74;;48446:93;48535:3;48446:93;:::i;:::-;48564:2;48559:3;48555:12;48548:19;;48207:366;;;:::o;48579:419::-;48745:4;48783:2;48772:9;48768:18;48760:26;;48832:9;48826:4;48822:20;48818:1;48807:9;48803:17;48796:47;48860:131;48986:4;48860:131;:::i;:::-;48852:139;;48579:419;;;:::o;49004:225::-;49144:34;49140:1;49132:6;49128:14;49121:58;49213:8;49208:2;49200:6;49196:15;49189:33;49004:225;:::o;49235:366::-;49377:3;49398:67;49462:2;49457:3;49398:67;:::i;:::-;49391:74;;49474:93;49563:3;49474:93;:::i;:::-;49592:2;49587:3;49583:12;49576:19;;49235:366;;;:::o;49607:419::-;49773:4;49811:2;49800:9;49796:18;49788:26;;49860:9;49854:4;49850:20;49846:1;49835:9;49831:17;49824:47;49888:131;50014:4;49888:131;:::i;:::-;49880:139;;49607:419;;;:::o;50032:182::-;50172:34;50168:1;50160:6;50156:14;50149:58;50032:182;:::o;50220:366::-;50362:3;50383:67;50447:2;50442:3;50383:67;:::i;:::-;50376:74;;50459:93;50548:3;50459:93;:::i;:::-;50577:2;50572:3;50568:12;50561:19;;50220:366;;;:::o;50592:419::-;50758:4;50796:2;50785:9;50781:18;50773:26;;50845:9;50839:4;50835:20;50831:1;50820:9;50816:17;50809:47;50873:131;50999:4;50873:131;:::i;:::-;50865:139;;50592:419;;;:::o;51017:224::-;51157:34;51153:1;51145:6;51141:14;51134:58;51226:7;51221:2;51213:6;51209:15;51202:32;51017:224;:::o;51247:366::-;51389:3;51410:67;51474:2;51469:3;51410:67;:::i;:::-;51403:74;;51486:93;51575:3;51486:93;:::i;:::-;51604:2;51599:3;51595:12;51588:19;;51247:366;;;:::o;51619:419::-;51785:4;51823:2;51812:9;51808:18;51800:26;;51872:9;51866:4;51862:20;51858:1;51847:9;51843:17;51836:47;51900:131;52026:4;51900:131;:::i;:::-;51892:139;;51619:419;;;:::o;52044:223::-;52184:34;52180:1;52172:6;52168:14;52161:58;52253:6;52248:2;52240:6;52236:15;52229:31;52044:223;:::o;52273:366::-;52415:3;52436:67;52500:2;52495:3;52436:67;:::i;:::-;52429:74;;52512:93;52601:3;52512:93;:::i;:::-;52630:2;52625:3;52621:12;52614:19;;52273:366;;;:::o;52645:419::-;52811:4;52849:2;52838:9;52834:18;52826:26;;52898:9;52892:4;52888:20;52884:1;52873:9;52869:17;52862:47;52926:131;53052:4;52926:131;:::i;:::-;52918:139;;52645:419;;;:::o;53070:181::-;53210:33;53206:1;53198:6;53194:14;53187:57;53070:181;:::o;53257:366::-;53399:3;53420:67;53484:2;53479:3;53420:67;:::i;:::-;53413:74;;53496:93;53585:3;53496:93;:::i;:::-;53614:2;53609:3;53605:12;53598:19;;53257:366;;;:::o;53629:419::-;53795:4;53833:2;53822:9;53818:18;53810:26;;53882:9;53876:4;53872:20;53868:1;53857:9;53853:17;53846:47;53910:131;54036:4;53910:131;:::i;:::-;53902:139;;53629:419;;;:::o;54054:166::-;54194:18;54190:1;54182:6;54178:14;54171:42;54054:166;:::o;54226:366::-;54368:3;54389:67;54453:2;54448:3;54389:67;:::i;:::-;54382:74;;54465:93;54554:3;54465:93;:::i;:::-;54583:2;54578:3;54574:12;54567:19;;54226:366;;;:::o;54598:419::-;54764:4;54802:2;54791:9;54787:18;54779:26;;54851:9;54845:4;54841:20;54837:1;54826:9;54822:17;54815:47;54879:131;55005:4;54879:131;:::i;:::-;54871:139;;54598:419;;;:::o;55023:148::-;55125:11;55162:3;55147:18;;55023:148;;;;:::o;55177:214::-;55317:66;55313:1;55305:6;55301:14;55294:90;55177:214;:::o;55397:402::-;55557:3;55578:85;55660:2;55655:3;55578:85;:::i;:::-;55571:92;;55672:93;55761:3;55672:93;:::i;:::-;55790:2;55785:3;55781:12;55774:19;;55397:402;;;:::o;55805:77::-;55842:7;55871:5;55860:16;;55805:77;;;:::o;55888:79::-;55927:7;55956:5;55945:16;;55888:79;;;:::o;55973:157::-;56078:45;56098:24;56116:5;56098:24;:::i;:::-;56078:45;:::i;:::-;56073:3;56066:58;55973:157;;:::o;56136:522::-;56349:3;56371:148;56515:3;56371:148;:::i;:::-;56364:155;;56529:75;56600:3;56591:6;56529:75;:::i;:::-;56629:2;56624:3;56620:12;56613:19;;56649:3;56642:10;;56136:522;;;;:::o;56664:118::-;56751:24;56769:5;56751:24;:::i;:::-;56746:3;56739:37;56664:118;;:::o;56788:86::-;56823:7;56863:4;56856:5;56852:16;56841:27;;56788:86;;;:::o;56880:112::-;56963:22;56979:5;56963:22;:::i;:::-;56958:3;56951:35;56880:112;;:::o;56998:545::-;57171:4;57209:3;57198:9;57194:19;57186:27;;57223:71;57291:1;57280:9;57276:17;57267:6;57223:71;:::i;:::-;57304:68;57368:2;57357:9;57353:18;57344:6;57304:68;:::i;:::-;57382:72;57450:2;57439:9;57435:18;57426:6;57382:72;:::i;:::-;57464;57532:2;57521:9;57517:18;57508:6;57464:72;:::i;:::-;56998:545;;;;;;;:::o;57549:175::-;57689:27;57685:1;57677:6;57673:14;57666:51;57549:175;:::o;57730:366::-;57872:3;57893:67;57957:2;57952:3;57893:67;:::i;:::-;57886:74;;57969:93;58058:3;57969:93;:::i;:::-;58087:2;58082:3;58078:12;58071:19;;57730:366;;;:::o;58102:419::-;58268:4;58306:2;58295:9;58291:18;58283:26;;58355:9;58349:4;58345:20;58341:1;58330:9;58326:17;58319:47;58383:131;58509:4;58383:131;:::i;:::-;58375:139;;58102:419;;;:::o;58527:237::-;58667:34;58663:1;58655:6;58651:14;58644:58;58736:20;58731:2;58723:6;58719:15;58712:45;58527:237;:::o;58770:366::-;58912:3;58933:67;58997:2;58992:3;58933:67;:::i;:::-;58926:74;;59009:93;59098:3;59009:93;:::i;:::-;59127:2;59122:3;59118:12;59111:19;;58770:366;;;:::o;59142:419::-;59308:4;59346:2;59335:9;59331:18;59323:26;;59395:9;59389:4;59385:20;59381:1;59370:9;59366:17;59359:47;59423:131;59549:4;59423:131;:::i;:::-;59415:139;;59142:419;;;:::o;59567:390::-;59673:3;59701:39;59734:5;59701:39;:::i;:::-;59756:89;59838:6;59833:3;59756:89;:::i;:::-;59749:96;;59854:65;59912:6;59907:3;59900:4;59893:5;59889:16;59854:65;:::i;:::-;59944:6;59939:3;59935:16;59928:23;;59677:280;59567:390;;;;:::o;59963:435::-;60143:3;60165:95;60256:3;60247:6;60165:95;:::i;:::-;60158:102;;60277:95;60368:3;60359:6;60277:95;:::i;:::-;60270:102;;60389:3;60382:10;;59963:435;;;;;:::o;60404:174::-;60544:26;60540:1;60532:6;60528:14;60521:50;60404:174;:::o;60584:366::-;60726:3;60747:67;60811:2;60806:3;60747:67;:::i;:::-;60740:74;;60823:93;60912:3;60823:93;:::i;:::-;60941:2;60936:3;60932:12;60925:19;;60584:366;;;:::o;60956:419::-;61122:4;61160:2;61149:9;61145:18;61137:26;;61209:9;61203:4;61199:20;61195:1;61184:9;61180:17;61173:47;61237:131;61363:4;61237:131;:::i;:::-;61229:139;;60956:419;;;:::o;61381:233::-;61521:34;61517:1;61509:6;61505:14;61498:58;61590:16;61585:2;61577:6;61573:15;61566:41;61381:233;:::o;61620:366::-;61762:3;61783:67;61847:2;61842:3;61783:67;:::i;:::-;61776:74;;61859:93;61948:3;61859:93;:::i;:::-;61977:2;61972:3;61968:12;61961:19;;61620:366;;;:::o;61992:419::-;62158:4;62196:2;62185:9;62181:18;62173:26;;62245:9;62239:4;62235:20;62231:1;62220:9;62216:17;62209:47;62273:131;62399:4;62273:131;:::i;:::-;62265:139;;61992:419;;;:::o;62417:170::-;62557:22;62553:1;62545:6;62541:14;62534:46;62417:170;:::o;62593:366::-;62735:3;62756:67;62820:2;62815:3;62756:67;:::i;:::-;62749:74;;62832:93;62921:3;62832:93;:::i;:::-;62950:2;62945:3;62941:12;62934:19;;62593:366;;;:::o;62965:419::-;63131:4;63169:2;63158:9;63154:18;63146:26;;63218:9;63212:4;63208:20;63204:1;63193:9;63189:17;63182:47;63246:131;63372:4;63246:131;:::i;:::-;63238:139;;62965:419;;;:::o;63390:98::-;63441:6;63475:5;63469:12;63459:22;;63390:98;;;:::o;63494:168::-;63577:11;63611:6;63606:3;63599:19;63651:4;63646:3;63642:14;63627:29;;63494:168;;;;:::o;63668:373::-;63754:3;63782:38;63814:5;63782:38;:::i;:::-;63836:70;63899:6;63894:3;63836:70;:::i;:::-;63829:77;;63915:65;63973:6;63968:3;63961:4;63954:5;63950:16;63915:65;:::i;:::-;64005:29;64027:6;64005:29;:::i;:::-;64000:3;63996:39;63989:46;;63758:283;63668:373;;;;:::o;64047:640::-;64242:4;64280:3;64269:9;64265:19;64257:27;;64294:71;64362:1;64351:9;64347:17;64338:6;64294:71;:::i;:::-;64375:72;64443:2;64432:9;64428:18;64419:6;64375:72;:::i;:::-;64457;64525:2;64514:9;64510:18;64501:6;64457:72;:::i;:::-;64576:9;64570:4;64566:20;64561:2;64550:9;64546:18;64539:48;64604:76;64675:4;64666:6;64604:76;:::i;:::-;64596:84;;64047:640;;;;;;;:::o;64693:141::-;64749:5;64780:6;64774:13;64765:22;;64796:32;64822:5;64796:32;:::i;:::-;64693:141;;;;:::o;64840:349::-;64909:6;64958:2;64946:9;64937:7;64933:23;64929:32;64926:119;;;64964:79;;:::i;:::-;64926:119;65084:1;65109:63;65164:7;65155:6;65144:9;65140:22;65109:63;:::i;:::-;65099:73;;65055:127;64840:349;;;;:::o;65195:182::-;65335:34;65331:1;65323:6;65319:14;65312:58;65195:182;:::o;65383:366::-;65525:3;65546:67;65610:2;65605:3;65546:67;:::i;:::-;65539:74;;65622:93;65711:3;65622:93;:::i;:::-;65740:2;65735:3;65731:12;65724:19;;65383:366;;;:::o;65755:419::-;65921:4;65959:2;65948:9;65944:18;65936:26;;66008:9;66002:4;65998:20;65994:1;65983:9;65979:17;65972:47;66036:131;66162:4;66036:131;:::i;:::-;66028:139;;65755:419;;;:::o;66180:178::-;66320:30;66316:1;66308:6;66304:14;66297:54;66180:178;:::o;66364:366::-;66506:3;66527:67;66591:2;66586:3;66527:67;:::i;:::-;66520:74;;66603:93;66692:3;66603:93;:::i;:::-;66721:2;66716:3;66712:12;66705:19;;66364:366;;;:::o;66736:419::-;66902:4;66940:2;66929:9;66925:18;66917:26;;66989:9;66983:4;66979:20;66975:1;66964:9;66960:17;66953:47;67017:131;67143:4;67017:131;:::i;:::-;67009:139;;66736:419;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "BASE_REWARD()": "22009af6",
    "BETA()": "071a7541",
    "MIN_STAKE_DURATION()": "e0c570ba",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "checkIn(bytes)": "304c44d1",
    "commitments(address)": "e8fcf723",
    "destinationMetadata(uint256)": "31d56d3c",
    "destinationNames(uint256)": "4efa8eeb",
    "getApproved(uint256)": "081812fc",
    "getJourneyNFTDetails(uint256)": "9f2a4bbd",
    "getLeaderboard()": "6d763a6e",
    "getUserJourneyCount(address)": "5c3e4f62",
    "getUserJourneyNFTs(address)": "2d8fb7ab",
    "isApprovedForAll(address,address)": "e985e9c5",
    "journeyNFTs(uint256)": "e237fc5e",
    "locationPools(uint256)": "35ac81cf",
    "name()": "06fdde03",
    "owner()": "8da5cb5b",
    "ownerOf(uint256)": "6352211e",
    "pause()": "8456cb59",
    "paused()": "5c975abb",
    "placeValues(uint256)": "0e6bc64f",
    "platformFeePercent()": "8c639a85",
    "processFailure()": "34363420",
    "renounceOwnership()": "715018a6",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "seedPool(uint256)": "025d26bd",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setDestinationMetadata(uint256,string)": "17cd8745",
    "setDestinationName(uint256,string)": "a0d9eeab",
    "setPlaceValue(uint256,uint256)": "c0c1fee5",
    "setPlatformFeePercent(uint256)": "cab230d2",
    "setTreasuryAddress(address)": "6605bfda",
    "setVerifierAddress(address)": "17e95526",
    "stake(uint256,uint256)": "7b0472f0",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "transferFrom(address,address,uint256)": "23b872dd",
    "transferOwnership(address)": "f2fde38b",
    "treasuryAddress()": "c5f956af",
    "unpause()": "3f4ba83a",
    "userJourneyNFTs(address,uint256)": "0e526b14",
    "userProfits(address)": "be354836",
    "verifierAddress()": "18bdffbb",
    "withdrawFees()": "476343ee"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialFeePercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"CheckedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"}],\"name\":\"FailureProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"}],\"name\":\"JourneyNFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PoolSeeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"ProfitRecorded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"travelDate\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BETA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"travelDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isProcessed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"destinationMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"destinationNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getJourneyNFTDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completionDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEarned\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"destinationName\",\"type\":\"string\"}],\"internalType\":\"struct WandryFi.JourneyNFT\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeaderboard\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserJourneyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserJourneyNFTs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"journeyNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"completionDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEarned\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"destinationName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locationPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"placeValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processFailure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_destinationId\",\"type\":\"uint256\"}],\"name\":\"seedPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_destinationId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"setDestinationMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_destinationId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setDestinationName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_destinationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setPlaceValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFeePercent\",\"type\":\"uint256\"}],\"name\":\"setPlatformFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_destinationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_travelDate\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userJourneyNFTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"v3.0: Added NFT rewards for successful journey completion.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Wanderify\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A travel-to-earn dApp where users stake on-chain to prove on-ground arrival.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/WandryFi.sol\":\"WandryFi\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"src/WandryFi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/**\\n * @title Wanderify\\n * @notice A travel-to-earn dApp where users stake on-chain to prove on-ground arrival.\\n * @dev v3.0: Added NFT rewards for successful journey completion.\\n */\\ncontract WandryFi is ERC721, ERC721URIStorage, Ownable, ReentrancyGuard, Pausable {\\n    using Counters for Counters.Counter;\\n\\n    // =============================================================\\n    // State Variables\\n    // =============================================================\\n\\n    Counters.Counter private _tokenIdCounter;\\n\\n    address public verifierAddress;\\n    address public treasuryAddress;\\n    uint256 public platformFeePercent; // e.g., 2 for 2%\\n\\n    uint256 public constant MIN_STAKE_DURATION = 15 days;\\n    uint256 public constant BASE_REWARD = 10 ether;\\n    uint256 public constant BETA = 50; // 0.5 scaled by 100\\n\\n    mapping(uint256 => uint256) public locationPools;\\n    mapping(uint256 => uint256) public placeValues;\\n    mapping(address => Commitment) public commitments;\\n    mapping(address => uint256) public userProfits;\\n\\n    // NFT-related mappings\\n    mapping(uint256 => JourneyNFT) public journeyNFTs; // tokenId => NFT details\\n    mapping(address => uint256[]) public userJourneyNFTs; // user => array of tokenIds\\n    mapping(uint256 => string) public destinationNames; // destinationId => name\\n    mapping(uint256 => string) public destinationMetadata; // destinationId => metadata URI\\n\\n    // =============================================================\\n    // Structs & Events\\n    // =============================================================\\n\\n    struct Commitment {\\n        address user;\\n        uint256 amountInPool;\\n        uint256 travelDate;\\n        uint256 destinationId;\\n        bool isProcessed;\\n    }\\n\\n    struct JourneyNFT {\\n        uint256 destinationId;\\n        uint256 completionDate;\\n        uint256 stakedAmount;\\n        uint256 rewardEarned;\\n        string destinationName;\\n    }\\n\\n    event Staked(address indexed user, uint256 destinationId, uint256 totalAmount, uint256 travelDate);\\n    event CheckedIn(address indexed user, uint256 destinationId, uint256 payout);\\n    event FailureProcessed(address indexed user, uint256 destinationId);\\n    event PoolSeeded(uint256 indexed destinationId, uint256 amount);\\n    event ProfitRecorded(address indexed user, uint256 profit);\\n    event JourneyNFTMinted(address indexed user, uint256 indexed tokenId, uint256 indexed destinationId);\\n\\n    // =============================================================\\n    // Constructor\\n    // =============================================================\\n\\n    constructor(address _verifierAddress, address _treasuryAddress, uint256 _initialFeePercent)\\n        ERC721(\\\"Wanderify Journey\\\", \\\"WJRNY\\\")\\n    {\\n        require(_verifierAddress != address(0), \\\"Verifier cannot be zero\\\");\\n        require(_treasuryAddress != address(0), \\\"Treasury cannot be zero\\\");\\n        require(_initialFeePercent <= 5, \\\"Fee cannot exceed 5%\\\");\\n        verifierAddress = _verifierAddress;\\n        treasuryAddress = _treasuryAddress;\\n        platformFeePercent = _initialFeePercent;\\n    }\\n\\n    // =============================================================\\n    // Core Functions\\n    // =============================================================\\n\\n    function stake(uint256 _destinationId, uint256 _travelDate) public payable whenNotPaused {\\n        require(msg.value > 0, \\\"Stake must be > 0\\\");\\n        // require(_travelDate > block.timestamp + MIN_STAKE_DURATION, \\\"Travel date must be >15 days away\\\");\\n        require(\\n            commitments[msg.sender].isProcessed == true || commitments[msg.sender].user == address(0),\\n            \\\"Active commitment exists\\\"\\n        );\\n\\n        uint256 feeAmount = (msg.value * platformFeePercent) / 100;\\n        uint256 poolAmount = msg.value - feeAmount;\\n\\n        (bool sent,) = treasuryAddress.call{value: feeAmount}(\\\"\\\");\\n        require(sent, \\\"Fee transfer failed\\\");\\n\\n        locationPools[_destinationId] += poolAmount;\\n\\n        commitments[msg.sender] = Commitment(msg.sender, poolAmount, _travelDate, _destinationId, false);\\n\\n        emit Staked(msg.sender, _destinationId, msg.value, _travelDate);\\n    }\\n\\n    function checkIn(bytes memory _signature) public nonReentrant whenNotPaused {\\n        Commitment storage commitment = commitments[msg.sender];\\n\\n        require(commitment.user != address(0), \\\"No active commitment\\\");\\n        require(!commitment.isProcessed, \\\"Commitment already processed\\\");\\n        require(block.timestamp >= commitment.travelDate, \\\"Travel date not reached yet\\\");\\n\\n        bytes32 messageHash = keccak256(abi.encodePacked(msg.sender, commitment.destinationId));\\n        address signer = recoverSigner(messageHash, _signature);\\n        require(signer == verifierAddress, \\\"Invalid signature: not from verifier\\\");\\n\\n        uint256 placeValueBonus = BASE_REWARD * (100 + (BETA * placeValues[commitment.destinationId])) / 100;\\n        uint256 poolCap = locationPools[commitment.destinationId] / 10;\\n        uint256 emission = (placeValueBonus < poolCap) ? placeValueBonus : poolCap;\\n\\n        uint256 totalPayout = commitment.amountInPool + emission;\\n\\n        // Leaderboard / profit logic\\n        if (platformFeePercent > 0) {\\n            uint256 originalStake = (commitment.amountInPool * 100) / (100 - platformFeePercent);\\n            if (totalPayout > originalStake) {\\n                uint256 profit = totalPayout - originalStake;\\n                userProfits[msg.sender] += profit;\\n                emit ProfitRecorded(msg.sender, profit);\\n            }\\n        }\\n\\n        locationPools[commitment.destinationId] -= emission;\\n        commitment.isProcessed = true;\\n\\n        // Mint NFT for successful journey completion\\n        _mintJourneyNFT(msg.sender, commitment.destinationId, commitment.amountInPool, emission);\\n\\n        (bool sent,) = msg.sender.call{value: totalPayout}(\\\"\\\");\\n        require(sent, \\\"Payout failed\\\");\\n\\n        emit CheckedIn(msg.sender, commitment.destinationId, totalPayout);\\n    }\\n\\n    function processFailure() public {\\n        Commitment storage commitment = commitments[msg.sender];\\n        require(commitment.user != address(0), \\\"No active commitment\\\");\\n        require(!commitment.isProcessed, \\\"Commitment already processed\\\");\\n        require(block.timestamp > commitment.travelDate, \\\"Travel deadline not passed yet\\\");\\n        commitment.isProcessed = true;\\n        emit FailureProcessed(msg.sender, commitment.destinationId);\\n    }\\n\\n    // =============================================================\\n    // NFT Functions\\n    // =============================================================\\n\\n    function _mintJourneyNFT(address to, uint256 destinationId, uint256 stakedAmount, uint256 rewardEarned) internal {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n\\n        _safeMint(to, tokenId);\\n\\n        // Store NFT metadata\\n        journeyNFTs[tokenId] = JourneyNFT({\\n            destinationId: destinationId,\\n            completionDate: block.timestamp,\\n            stakedAmount: stakedAmount,\\n            rewardEarned: rewardEarned,\\n            destinationName: destinationNames[destinationId]\\n        });\\n\\n        // Add to user's journey collection\\n        userJourneyNFTs[to].push(tokenId);\\n\\n        // Set token URI if metadata exists\\n        if (bytes(destinationMetadata[destinationId]).length > 0) {\\n            _setTokenURI(tokenId, destinationMetadata[destinationId]);\\n        }\\n\\n        emit JourneyNFTMinted(to, tokenId, destinationId);\\n    }\\n\\n    function getUserJourneyNFTs(address user) public view returns (uint256[] memory) {\\n        return userJourneyNFTs[user];\\n    }\\n\\n    function getJourneyNFTDetails(uint256 tokenId) public view returns (JourneyNFT memory) {\\n        require(_exists(tokenId), \\\"NFT does not exist\\\");\\n        return journeyNFTs[tokenId];\\n    }\\n\\n    function getUserJourneyCount(address user) public view returns (uint256) {\\n        return userJourneyNFTs[user].length;\\n    }\\n\\n    // =============================================================\\n    // Admin Functions\\n    // =============================================================\\n\\n    function seedPool(uint256 _destinationId) public payable onlyOwner {\\n        require(msg.value > 0, \\\"Seed must be >0\\\");\\n        locationPools[_destinationId] += msg.value;\\n        emit PoolSeeded(_destinationId, msg.value);\\n    }\\n\\n    function setDestinationName(uint256 _destinationId, string memory _name) public onlyOwner {\\n        destinationNames[_destinationId] = _name;\\n    }\\n\\n    function setDestinationMetadata(uint256 _destinationId, string memory _metadataURI) public onlyOwner {\\n        destinationMetadata[_destinationId] = _metadataURI;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function withdrawFees() public onlyOwner {\\n        uint256 balance = address(this).balance;\\n        (bool sent,) = treasuryAddress.call{value: balance}(\\\"\\\");\\n        require(sent, \\\"Withdrawal failed\\\");\\n    }\\n\\n    function setVerifierAddress(address _newAddress) public onlyOwner {\\n        require(_newAddress != address(0), \\\"Cannot be zero address\\\");\\n        verifierAddress = _newAddress;\\n    }\\n\\n    function setTreasuryAddress(address _newAddress) public onlyOwner {\\n        require(_newAddress != address(0), \\\"Cannot be zero address\\\");\\n        treasuryAddress = _newAddress;\\n    }\\n\\n    function setPlatformFeePercent(uint256 _newFeePercent) public onlyOwner {\\n        require(_newFeePercent <= 5, \\\"Fee cannot exceed 5%\\\");\\n        platformFeePercent = _newFeePercent;\\n    }\\n\\n    function setPlaceValue(uint256 _destinationId, uint256 _value) public onlyOwner {\\n        placeValues[_destinationId] = _value;\\n    }\\n\\n    // =============================================================\\n    // Override Functions\\n    // =============================================================\\n\\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721URIStorage) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    // =============================================================\\n    // Helper Functions\\n    // =============================================================\\n\\n    function recoverSigner(bytes32 _messageHash, bytes memory _signature) internal pure returns (address) {\\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(_signature);\\n        bytes32 prefixedHash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _messageHash));\\n        return ecrecover(prefixedHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory sig) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        require(sig.length == 65, \\\"Invalid signature length\\\");\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n    }\\n\\n    function getLeaderboard() public pure returns (address[] memory, uint256[] memory) {\\n        address[] memory users = new address[](0);\\n        uint256[] memory profits = new uint256[](0);\\n        return (users, profits);\\n    }\\n}\\n\",\"keccak256\":\"0xe3d05f3f1b712f7a7da20a5b7666024a7420c470e2edaafae3a816aec68bb227\",\"license\":\"MIT\"}},\"version\":1}",
  "metadata": {
    "compiler": { "version": "0.8.30+commit.73712a01" },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_verifierAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_treasuryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_initialFeePercent",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_fromTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "_toTokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "BatchMetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "destinationId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "payout",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "CheckedIn",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "destinationId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "FailureProcessed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "destinationId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "JourneyNFTMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MetadataUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Paused",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "destinationId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "PoolSeeded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "profit",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ProfitRecorded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "destinationId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "travelDate",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Staked",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Unpaused",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "BASE_REWARD",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "BETA",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MIN_STAKE_DURATION",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "owner", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "_signature", "type": "bytes" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "checkIn"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "commitments",
          "outputs": [
            { "internalType": "address", "name": "user", "type": "address" },
            {
              "internalType": "uint256",
              "name": "amountInPool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "travelDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "destinationId",
              "type": "uint256"
            },
            { "internalType": "bool", "name": "isProcessed", "type": "bool" }
          ]
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "destinationMetadata",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ]
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "destinationNames",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ]
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getJourneyNFTDetails",
          "outputs": [
            {
              "internalType": "struct WandryFi.JourneyNFT",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "destinationId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "completionDate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stakedAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardEarned",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "destinationName",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "getLeaderboard",
          "outputs": [
            { "internalType": "address[]", "name": "", "type": "address[]" },
            { "internalType": "uint256[]", "name": "", "type": "uint256[]" }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "user", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getUserJourneyCount",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "user", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getUserJourneyNFTs",
          "outputs": [
            { "internalType": "uint256[]", "name": "", "type": "uint256[]" }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "owner", "type": "address" },
            { "internalType": "address", "name": "operator", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "journeyNFTs",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "destinationId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "completionDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardEarned",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "destinationName",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "locationPools",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "pause"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "paused",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "placeValues",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "platformFeePercent",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "processFailure"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "from", "type": "address" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "from", "type": "address" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "tokenId", "type": "uint256" },
            { "internalType": "bytes", "name": "data", "type": "bytes" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_destinationId",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "seedPool"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            { "internalType": "bool", "name": "approved", "type": "bool" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_destinationId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_metadataURI",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDestinationMetadata"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_destinationId",
              "type": "uint256"
            },
            { "internalType": "string", "name": "_name", "type": "string" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDestinationName"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_destinationId",
              "type": "uint256"
            },
            { "internalType": "uint256", "name": "_value", "type": "uint256" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPlaceValue"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_newFeePercent",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPlatformFeePercent"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setTreasuryAddress"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setVerifierAddress"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_destinationId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_travelDate",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "stake"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ]
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            { "internalType": "string", "name": "", "type": "string" }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "from", "type": "address" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "tokenId", "type": "uint256" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "newOwner", "type": "address" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "treasuryAddress",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unpause"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "", "type": "address" },
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "userJourneyNFTs",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "userProfits",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "verifierAddress",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawFees"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": { "details": "See {IERC721-approve}." },
          "balanceOf(address)": { "details": "See {IERC721-balanceOf}." },
          "getApproved(uint256)": { "details": "See {IERC721-getApproved}." },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "name()": { "details": "See {IERC721Metadata-name}." },
          "owner()": { "details": "Returns the address of the current owner." },
          "ownerOf(uint256)": { "details": "See {IERC721-ownerOf}." },
          "paused()": {
            "details": "Returns true if the contract is paused, and false otherwise."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "symbol()": { "details": "See {IERC721Metadata-symbol}." },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "userdoc": { "kind": "user", "methods": {}, "version": 1 }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=lib/openzeppelin-contracts/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": { "enabled": false, "runs": 200 },
      "metadata": { "useLiteralContent": true, "bytecodeHash": "ipfs" },
      "compilationTarget": { "src/WandryFi.sol": "WandryFi" },
      "evmVersion": "prague",
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
        "keccak256": "0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC4906.sol": {
        "keccak256": "0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\nimport \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC721.sol": {
        "keccak256": "0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/security/Pausable.sol": {
        "keccak256": "0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol": {
        "keccak256": "0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
        "keccak256": "0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
        "keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
        "keccak256": "0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../interfaces/IERC4906.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n\n        emit MetadataUpdate(tokenId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Counters.sol": {
        "keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n",
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n",
        "license": "MIT"
      },
      "src/WandryFi.sol": {
        "keccak256": "0xe3d05f3f1b712f7a7da20a5b7666024a7420c470e2edaafae3a816aec68bb227",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\n/**\n * @title Wanderify\n * @notice A travel-to-earn dApp where users stake on-chain to prove on-ground arrival.\n * @dev v3.0: Added NFT rewards for successful journey completion.\n */\ncontract WandryFi is ERC721, ERC721URIStorage, Ownable, ReentrancyGuard, Pausable {\n    using Counters for Counters.Counter;\n\n    // =============================================================\n    // State Variables\n    // =============================================================\n\n    Counters.Counter private _tokenIdCounter;\n\n    address public verifierAddress;\n    address public treasuryAddress;\n    uint256 public platformFeePercent; // e.g., 2 for 2%\n\n    uint256 public constant MIN_STAKE_DURATION = 15 days;\n    uint256 public constant BASE_REWARD = 10 ether;\n    uint256 public constant BETA = 50; // 0.5 scaled by 100\n\n    mapping(uint256 => uint256) public locationPools;\n    mapping(uint256 => uint256) public placeValues;\n    mapping(address => Commitment) public commitments;\n    mapping(address => uint256) public userProfits;\n\n    // NFT-related mappings\n    mapping(uint256 => JourneyNFT) public journeyNFTs; // tokenId => NFT details\n    mapping(address => uint256[]) public userJourneyNFTs; // user => array of tokenIds\n    mapping(uint256 => string) public destinationNames; // destinationId => name\n    mapping(uint256 => string) public destinationMetadata; // destinationId => metadata URI\n\n    // =============================================================\n    // Structs & Events\n    // =============================================================\n\n    struct Commitment {\n        address user;\n        uint256 amountInPool;\n        uint256 travelDate;\n        uint256 destinationId;\n        bool isProcessed;\n    }\n\n    struct JourneyNFT {\n        uint256 destinationId;\n        uint256 completionDate;\n        uint256 stakedAmount;\n        uint256 rewardEarned;\n        string destinationName;\n    }\n\n    event Staked(address indexed user, uint256 destinationId, uint256 totalAmount, uint256 travelDate);\n    event CheckedIn(address indexed user, uint256 destinationId, uint256 payout);\n    event FailureProcessed(address indexed user, uint256 destinationId);\n    event PoolSeeded(uint256 indexed destinationId, uint256 amount);\n    event ProfitRecorded(address indexed user, uint256 profit);\n    event JourneyNFTMinted(address indexed user, uint256 indexed tokenId, uint256 indexed destinationId);\n\n    // =============================================================\n    // Constructor\n    // =============================================================\n\n    constructor(address _verifierAddress, address _treasuryAddress, uint256 _initialFeePercent)\n        ERC721(\"Wanderify Journey\", \"WJRNY\")\n    {\n        require(_verifierAddress != address(0), \"Verifier cannot be zero\");\n        require(_treasuryAddress != address(0), \"Treasury cannot be zero\");\n        require(_initialFeePercent <= 5, \"Fee cannot exceed 5%\");\n        verifierAddress = _verifierAddress;\n        treasuryAddress = _treasuryAddress;\n        platformFeePercent = _initialFeePercent;\n    }\n\n    // =============================================================\n    // Core Functions\n    // =============================================================\n\n    function stake(uint256 _destinationId, uint256 _travelDate) public payable whenNotPaused {\n        require(msg.value > 0, \"Stake must be > 0\");\n        // require(_travelDate > block.timestamp + MIN_STAKE_DURATION, \"Travel date must be >15 days away\");\n        require(\n            commitments[msg.sender].isProcessed == true || commitments[msg.sender].user == address(0),\n            \"Active commitment exists\"\n        );\n\n        uint256 feeAmount = (msg.value * platformFeePercent) / 100;\n        uint256 poolAmount = msg.value - feeAmount;\n\n        (bool sent,) = treasuryAddress.call{value: feeAmount}(\"\");\n        require(sent, \"Fee transfer failed\");\n\n        locationPools[_destinationId] += poolAmount;\n\n        commitments[msg.sender] = Commitment(msg.sender, poolAmount, _travelDate, _destinationId, false);\n\n        emit Staked(msg.sender, _destinationId, msg.value, _travelDate);\n    }\n\n    function checkIn(bytes memory _signature) public nonReentrant whenNotPaused {\n        Commitment storage commitment = commitments[msg.sender];\n\n        require(commitment.user != address(0), \"No active commitment\");\n        require(!commitment.isProcessed, \"Commitment already processed\");\n        require(block.timestamp >= commitment.travelDate, \"Travel date not reached yet\");\n\n        bytes32 messageHash = keccak256(abi.encodePacked(msg.sender, commitment.destinationId));\n        address signer = recoverSigner(messageHash, _signature);\n        require(signer == verifierAddress, \"Invalid signature: not from verifier\");\n\n        uint256 placeValueBonus = BASE_REWARD * (100 + (BETA * placeValues[commitment.destinationId])) / 100;\n        uint256 poolCap = locationPools[commitment.destinationId] / 10;\n        uint256 emission = (placeValueBonus < poolCap) ? placeValueBonus : poolCap;\n\n        uint256 totalPayout = commitment.amountInPool + emission;\n\n        // Leaderboard / profit logic\n        if (platformFeePercent > 0) {\n            uint256 originalStake = (commitment.amountInPool * 100) / (100 - platformFeePercent);\n            if (totalPayout > originalStake) {\n                uint256 profit = totalPayout - originalStake;\n                userProfits[msg.sender] += profit;\n                emit ProfitRecorded(msg.sender, profit);\n            }\n        }\n\n        locationPools[commitment.destinationId] -= emission;\n        commitment.isProcessed = true;\n\n        // Mint NFT for successful journey completion\n        _mintJourneyNFT(msg.sender, commitment.destinationId, commitment.amountInPool, emission);\n\n        (bool sent,) = msg.sender.call{value: totalPayout}(\"\");\n        require(sent, \"Payout failed\");\n\n        emit CheckedIn(msg.sender, commitment.destinationId, totalPayout);\n    }\n\n    function processFailure() public {\n        Commitment storage commitment = commitments[msg.sender];\n        require(commitment.user != address(0), \"No active commitment\");\n        require(!commitment.isProcessed, \"Commitment already processed\");\n        require(block.timestamp > commitment.travelDate, \"Travel deadline not passed yet\");\n        commitment.isProcessed = true;\n        emit FailureProcessed(msg.sender, commitment.destinationId);\n    }\n\n    // =============================================================\n    // NFT Functions\n    // =============================================================\n\n    function _mintJourneyNFT(address to, uint256 destinationId, uint256 stakedAmount, uint256 rewardEarned) internal {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n\n        _safeMint(to, tokenId);\n\n        // Store NFT metadata\n        journeyNFTs[tokenId] = JourneyNFT({\n            destinationId: destinationId,\n            completionDate: block.timestamp,\n            stakedAmount: stakedAmount,\n            rewardEarned: rewardEarned,\n            destinationName: destinationNames[destinationId]\n        });\n\n        // Add to user's journey collection\n        userJourneyNFTs[to].push(tokenId);\n\n        // Set token URI if metadata exists\n        if (bytes(destinationMetadata[destinationId]).length > 0) {\n            _setTokenURI(tokenId, destinationMetadata[destinationId]);\n        }\n\n        emit JourneyNFTMinted(to, tokenId, destinationId);\n    }\n\n    function getUserJourneyNFTs(address user) public view returns (uint256[] memory) {\n        return userJourneyNFTs[user];\n    }\n\n    function getJourneyNFTDetails(uint256 tokenId) public view returns (JourneyNFT memory) {\n        require(_exists(tokenId), \"NFT does not exist\");\n        return journeyNFTs[tokenId];\n    }\n\n    function getUserJourneyCount(address user) public view returns (uint256) {\n        return userJourneyNFTs[user].length;\n    }\n\n    // =============================================================\n    // Admin Functions\n    // =============================================================\n\n    function seedPool(uint256 _destinationId) public payable onlyOwner {\n        require(msg.value > 0, \"Seed must be >0\");\n        locationPools[_destinationId] += msg.value;\n        emit PoolSeeded(_destinationId, msg.value);\n    }\n\n    function setDestinationName(uint256 _destinationId, string memory _name) public onlyOwner {\n        destinationNames[_destinationId] = _name;\n    }\n\n    function setDestinationMetadata(uint256 _destinationId, string memory _metadataURI) public onlyOwner {\n        destinationMetadata[_destinationId] = _metadataURI;\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function withdrawFees() public onlyOwner {\n        uint256 balance = address(this).balance;\n        (bool sent,) = treasuryAddress.call{value: balance}(\"\");\n        require(sent, \"Withdrawal failed\");\n    }\n\n    function setVerifierAddress(address _newAddress) public onlyOwner {\n        require(_newAddress != address(0), \"Cannot be zero address\");\n        verifierAddress = _newAddress;\n    }\n\n    function setTreasuryAddress(address _newAddress) public onlyOwner {\n        require(_newAddress != address(0), \"Cannot be zero address\");\n        treasuryAddress = _newAddress;\n    }\n\n    function setPlatformFeePercent(uint256 _newFeePercent) public onlyOwner {\n        require(_newFeePercent <= 5, \"Fee cannot exceed 5%\");\n        platformFeePercent = _newFeePercent;\n    }\n\n    function setPlaceValue(uint256 _destinationId, uint256 _value) public onlyOwner {\n        placeValues[_destinationId] = _value;\n    }\n\n    // =============================================================\n    // Override Functions\n    // =============================================================\n\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\n        super._burn(tokenId);\n    }\n\n    function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory) {\n        return super.tokenURI(tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721URIStorage) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    // =============================================================\n    // Helper Functions\n    // =============================================================\n\n    function recoverSigner(bytes32 _messageHash, bytes memory _signature) internal pure returns (address) {\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(_signature);\n        bytes32 prefixedHash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\n        return ecrecover(prefixedHash, v, r, s);\n    }\n\n    function splitSignature(bytes memory sig) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\n        require(sig.length == 65, \"Invalid signature length\");\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n    }\n\n    function getLeaderboard() public pure returns (address[] memory, uint256[] memory) {\n        address[] memory users = new address[](0);\n        uint256[] memory profits = new uint256[](0);\n        return (users, profits);\n    }\n}\n",
        "license": "MIT"
      }
    },
    "version": 1
  },
  "id": 42
}
